"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMacrosAPI = exports.getLatestNpmVersion = void 0;
const fs_1 = __importDefault(require("fs"));
const semver_1 = require("semver");
const axios_1 = __importDefault(require("axios"));
const path_1 = require("path");
const PACKAGE_NAME = '@sap/ux-specification';
/**
 * Method to retrieve the latest version of a package on npmjs
 * @param packageName Name of the package on npmjs
 * @returns Promise for latest version released to npmjs
 */
const getLatestNpmVersion = async (packageName) => {
    try {
        const response = await axios_1.default.get(`https://registry.npmjs.org/${packageName}/latest`);
        return response.data.version;
    }
    catch (error) {
        console.error(`Error fetching latest version: ${error.message}`);
        return null;
    }
};
exports.getLatestNpmVersion = getLatestNpmVersion;
const MINIMAL_SUPPORTED_VERSION = 85;
const CACHE_FOLDER = 'cache';
const API_JSON = 'api.json';
var UI5Info;
(function (UI5Info) {
    UI5Info["OfficialUrl"] = "https://ui5.sap.com";
    UI5Info["NightlyBuild"] = "https://sapui5nightly.int.sap.eu2.hana.ondemand.com";
    UI5Info["MaintainedVersions"] = "version.json";
    UI5Info["AllVersions"] = "version.json?sap-ui-config-showall=true&sap-ui-config-patches=true";
    UI5Info["Api"] = "test-resources/sap/fe/macros/designtime/apiref/api.json";
})(UI5Info || (UI5Info = {}));
/**
 * Method checks if passed specification version should be considered as latest.
 * @param {string} specVersion Specification version.
 * @returns {boolean} Is latest specification version.
 */
async function isLatestVersion(specVersion) {
    const ui5Version = (0, semver_1.coerce)(specVersion);
    if (specVersion === '9.9.9') {
        return true;
    }
    else {
        const LATEST_RELEASED_SPEC_VERSION = await (0, exports.getLatestNpmVersion)(PACKAGE_NAME);
        if (LATEST_RELEASED_SPEC_VERSION) {
            const COERCE_LATEST_RELEASED_SPEC_VERSION = (0, semver_1.coerce)(LATEST_RELEASED_SPEC_VERSION);
            return ui5Version.major === 1 && ui5Version.minor >= COERCE_LATEST_RELEASED_SPEC_VERSION.minor;
        }
    }
    return false;
}
/**
 * Method finds SAPUI5 version for passed specification version by searching in list of passed SAPUI5 versions.
 * @param {UI5Versions} versions SAPUI5 versions.
 * @param {string} specVersion Specification version.
 * @returns {string} Found associated SAPUI5 versions.
 */
function findValidVersion(versions, specVersion) {
    const ui5Version = (0, semver_1.coerce)(specVersion);
    if (ui5Version.major === 1 && ui5Version.minor < MINIMAL_SUPPORTED_VERSION) {
        return undefined;
    }
    let foundVersion = undefined;
    for (const version in versions) {
        const versionInfo = (0, semver_1.coerce)(version);
        if (!versionInfo) {
            continue;
        }
        if (ui5Version.major === versionInfo.major && versionInfo.minor <= ui5Version.minor) {
            if (!foundVersion || versionInfo.minor > foundVersion.minor) {
                foundVersion = {
                    version: versions[version].version,
                    minor: versionInfo.minor
                };
            }
        }
    }
    return foundVersion ? foundVersion.version : undefined;
}
/**
 * Method returns valid SAPUI5 version for passed specification version by looking for SAPUI5 version in "https://ui5.sap.com/version.json".
 * @param {string} specVersion Specification version.
 * @returns {string} SAPUI5 versions.
 */
async function getValidUI5Version(specVersion) {
    let version = undefined;
    const requestUrl = `${"https://ui5.sap.com" /* UI5Info.OfficialUrl */}/${"version.json?sap-ui-config-showall=true&sap-ui-config-patches=true" /* UI5Info.AllVersions */}`;
    try {
        const response = await axios_1.default.get(requestUrl);
        if (response.status === 200) {
            const ui5Version = findValidVersion(response.data, specVersion);
            if (!ui5Version) {
                console.log('No valid ui5 version found');
            }
            return ui5Version;
        }
    }
    catch (error) {
        console.log(`UI5 versions request "${requestUrl}" failed with error "${error}"`);
        version = undefined;
    }
    return version;
}
/**
 * Method retrieves "api.json" for "sap.fe.macros" by sending request to "https://ui5.sap.com/${ui5Version}/test-resources/sap/fe/macros/designtime/apiref/api.json".
 * @param {string} ui5Version SAPUI5 version to read "sap.fe.macros" api.
 * @param {boolean} [useNightlyBuild] If true, then dev/nightly build version will be retrieved.
 * @returns {Promise<MacrosAPI | undefined>} Promise to "sap.fe.macros" api.
 */
async function retrieveMacrosAPI(ui5Version, useNightlyBuild = false) {
    let api = undefined;
    const subPath = ui5Version ? `${ui5Version}/` : '';
    const requestUrl = `${useNightlyBuild ? "https://sapui5nightly.int.sap.eu2.hana.ondemand.com" /* UI5Info.NightlyBuild */ : "https://ui5.sap.com" /* UI5Info.OfficialUrl */}/${subPath}${"test-resources/sap/fe/macros/designtime/apiref/api.json" /* UI5Info.Api */}`;
    try {
        const response = await axios_1.default.get(requestUrl);
        if (response.status === 200) {
            api = response.data;
        }
    }
    catch (error) {
        console.log(`API request "${requestUrl}" failed with error "${error}"`);
        api = undefined;
    }
    return api;
}
/**
 * Method saves passed api as cached version.
 * @param {MacrosAPI} api "sap.fe.macros" api to save.
 * @param {string} cachePath Cache folder path.
 * @param {string} apiFilePath API file path.
 */
function saveAPI(api, cachePath, apiFilePath) {
    if (!fs_1.default.existsSync(cachePath)) {
        fs_1.default.mkdirSync(cachePath);
    }
    // Save result
    fs_1.default.writeFile(apiFilePath, JSON.stringify(api, null, 2), function (error) {
        const message = error ? `Save failed with error "${error}"` : `${API_JSON} file successfully saved`;
        console.log(message);
    });
}
/**
 * Method returns "sap.fe.macros" api for passed specification version.
 * @param {string} specVersion Specification version.
 * @param {boolean} [useNightlyBuild] If true, then dev/nightly build version will be retrieved.
 * @returns {Promise<MacrosAPI | undefined>} Promise to "sap.fe.macros" api.
 */
async function getMacrosAPI(specVersion, useNightlyBuild = false, overwriteCache = false) {
    const cachePath = (0, path_1.join)(__dirname, CACHE_FOLDER);
    const apiFilePath = (0, path_1.join)(cachePath, API_JSON);
    let api;
    // Check cached file
    if (fs_1.default.existsSync(apiFilePath) && !overwriteCache) {
        const apiContent = fs_1.default.readFileSync(apiFilePath, 'utf8');
        try {
            api = JSON.parse(apiContent);
        }
        catch {
            console.log('Parse of cached api.json failed');
        }
    }
    if (!api) {
        // Find ui5 version to include into request URL for API
        const useLatestVersion = await isLatestVersion(specVersion);
        let ui5Version = '';
        // Get ui5 version
        if (!useLatestVersion) {
            // Find valid maintainable version
            ui5Version = await getValidUI5Version(specVersion);
        }
        if (ui5Version || useLatestVersion) {
            // Request macros API
            api = await retrieveMacrosAPI(ui5Version, useNightlyBuild);
            if (api) {
                saveAPI(api, cachePath, apiFilePath);
            }
        }
    }
    return api;
}
exports.getMacrosAPI = getMacrosAPI;
//# sourceMappingURL=api.js.map