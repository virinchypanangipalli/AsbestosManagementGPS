import type { HierarchyPointNode, HierarchyNode, Selection } from 'd3';
import type { TreeNode, TreeData } from '../types';
export declare class TreeUI {
    private innerHeight;
    private innerWidth;
    private maxLabelLength;
    private levelWidth;
    private countID;
    private duration;
    private rawTreeData;
    root: HierarchyNode<TreeNode>;
    rootNode: HierarchyPointNode<TreeNode>;
    private treeIcon;
    private searchResultContainer;
    private buttonContainer;
    svgTreeContainer: Selection<SVGSVGElement, TreeNode, HTMLElement, {}>;
    svgTreeGroup: Selection<SVGGElement, TreeNode, HTMLElement, {}>;
    private toolTip;
    private treeLayout;
    private nodes;
    private links;
    private zoomListener;
    private canvasOffset;
    constructor();
    render(container: string, data: TreeData, icon: string): void;
    toggleExpandAll(expand: boolean): void;
    applyFilter(updatedTreeData: TreeData, clear: boolean): void;
    private zoom;
    zoomTree(value: number, center?: boolean): number;
    private fitToCanvas;
    private centerNode;
    private centerTree;
    private updateCanvasSize;
    private createRootHierarchy;
    private setupEventListeners;
    private handleEventOnNode;
    private updateTree;
    private getContentHeight;
    private toggleExpandOrCollapse;
}
//# sourceMappingURL=TreeUI.d.ts.map