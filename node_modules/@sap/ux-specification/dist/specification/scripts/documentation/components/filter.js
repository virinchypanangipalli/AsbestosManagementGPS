"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = void 0;
function isNodeMatching(child, searchTerm) {
    const { name } = child;
    return name.toLowerCase().includes(searchTerm);
}
function filterNode(result, innerChild, searchTerm) {
    let found = false;
    let childClone = { ...innerChild, children: [] };
    const isNodeMatched = isNodeMatching(innerChild, searchTerm);
    if (isNodeMatched) {
        found = true;
    }
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const innerFound = filterNodes(childClone.children, innerChild, searchTerm);
    if (innerFound) {
        found = true;
        childClone = {
            ...innerChild,
            children: childClone.children
        };
    }
    if (isNodeMatched || innerFound) {
        result.push(childClone);
    }
    return found;
}
function filterNodes(result, child, searchTerm) {
    let found = false;
    for (const innerChild of child.children) {
        found = filterNode(result, innerChild, searchTerm) || found;
    }
    return found;
}
function filter(input, searchTerm) {
    const resultNodes = [];
    // Case insensitive search
    searchTerm = searchTerm.trim().toLowerCase().replace(/\s/g, '');
    if (!searchTerm) {
        //return input;
        return undefined;
    }
    // Apply search
    const found = filterNode(resultNodes, input, searchTerm);
    return found ? resultNodes[0] : undefined;
}
exports.filter = filter;
//# sourceMappingURL=filter.js.map