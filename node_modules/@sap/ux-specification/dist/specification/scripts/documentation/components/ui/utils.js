"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.animateNode = exports.diagonal = exports.childCount = exports.visit = exports.getBB = exports.splitName = void 0;
const d3_1 = require("d3");
const jquery_1 = __importDefault(require("jquery"));
// function to split CamelCase
function splitName(elem) {
    const splitElem = elem
        .split(/(?=[A-Z])/)
        .map(function (p) {
        return p.charAt(0).toUpperCase() + p.slice(1);
    })
        .join(' ');
    return splitElem;
}
exports.splitName = splitName;
// determine the coordinates of an svg element
function getBB(selection) {
    selection.each(function (d) {
        d.data.bbox = this.getBBox();
    });
}
exports.getBB = getBB;
// function to walk through all nodes
function visit(parent, visitFn, childrenFn) {
    if (!parent)
        return;
    visitFn(parent);
    const children = childrenFn(parent);
    if (children) {
        const count = children.length;
        for (let i = 0; i < count; i++) {
            visit(children[i], visitFn, childrenFn);
        }
    }
}
exports.visit = visit;
function childCount(levelWidth, level, n) {
    if (n.children && n.children.length > 0) {
        if (levelWidth.length <= level + 1)
            levelWidth.push(0);
        levelWidth[level + 1] += n.children.length;
        n.children.forEach(function (d) {
            childCount(levelWidth, level + 1, d);
        });
    }
}
exports.childCount = childCount;
// function to draw the links between the nodes
function diagonal(d) {
    let nodeGroup, width = 0;
    if (d.source.data.id)
        nodeGroup = (0, d3_1.select)('#n-' + d.source.data.id).node();
    // get width of node group element to set path accordingly
    if (nodeGroup)
        width = nodeGroup.getBBox().width;
    const path = 'M' + (d.source.y + width + 20) + ',' + d.source.x + 'H' + (d.target.y - 15) + 'V' + d.target.x + ('h' + 15);
    return path;
}
exports.diagonal = diagonal;
// function to animate the searched node
function animateNode(node) {
    for (let i = 0; i < 3; i++) {
        (0, jquery_1.default)('#n-' + node.data.id + ' .node-text')
            .fadeTo(400, 0)
            .fadeTo(400, 1);
    }
}
exports.animateNode = animateNode;
//# sourceMappingURL=utils.js.map