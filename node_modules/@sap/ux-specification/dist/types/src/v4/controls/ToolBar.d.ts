import type { ActionAfterExecutionConfiguration } from '../webapp/manifest/ManifestSettings';
import type { CustomAction, CustomActionPosition } from './CustomAction';
interface ActionAfterExecutionConfigurationToolBarLR extends ActionAfterExecutionConfiguration {
}
export declare enum SelectType {
    single = "single",
    multi = "multi"
}
/**
 * Action
 * @isViewNode true
 */
export interface ToolBarAction {
    /**
     * Enables single selection for a bound action
     */
    enableOnSelect?: SelectType;
    /**
     * Settings that are only relevant for actions (associated with a UI.DataFieldForAction annotation)
     */
    afterExecution?: ActionAfterExecutionConfigurationToolBarLR;
}
/**
 * Action
 * @isViewNode true
 */
export interface ViewToolBarAction {
    /**
     * Enables single selection for a bound action
     */
    enableOnSelect?: SelectType;
    /**
     * Settings that are only relevant for actions (associated with a UI.DataFieldForAction annotation)
     */
    afterExecution?: ActionAfterExecutionConfigurationToolBarLR;
}
export type ChartToolBarAction = {};
/**
 * Actions
 * @isViewNode true
 */
export interface Actions {
    [key: string]: ToolBarAction | CustomTableAction;
}
/**
 * Actions
 * @isViewNode true
 */
export interface ViewActions {
    [key: string]: ViewToolBarAction | ChartToolBarAction | ViewTableCustomAction;
}
/**
 * Table Toolbar
 * @isViewNode true
 */
export interface ToolBar {
    actions: Actions;
}
/**
 * Chart Toolbar
 * @isViewNode true
 */
export interface ViewChartToolBar {
    actions: ViewActions;
}
export interface CustomTableAction extends CustomAction {
    /**
     * Indicates whether the action requires a selection of items.
     * @artifactType XMLProperty
     */
    requiresSelection?: boolean;
}
export interface ViewCustomActionPosition extends CustomActionPosition {
    /**
     * The key of another action to be used as placement anchor.
     * @artifactType Manifest
     */
    anchor?: string;
}
export interface ViewTableCustomAction extends CustomTableAction {
    /**
     * Defines the position of the action relative to other actions.
     * @artifactType Manifest
     */
    position?: ViewCustomActionPosition;
}
export {};
//# sourceMappingURL=ToolBar.d.ts.map