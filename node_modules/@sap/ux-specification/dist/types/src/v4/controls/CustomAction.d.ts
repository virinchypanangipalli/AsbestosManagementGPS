export declare enum ActionPlacement {
    After = "After",
    Before = "Before"
}
export interface CustomActionPosition {
    /**
     * The key of another action to be used as placement anchor.
     * @artifactType Manifest
     */
    anchor?: string;
    /**
     * Define the placement, either before or after the anchor action.
     * @artifactType Manifest
     */
    placement: ActionPlacement;
}
/**
 * Action
 * @isViewNode true
 */
export interface CustomAction {
    /**
     * The text that is displayed on the button (typically a binding to an i18n entry).
     * @i18nClassification COL: Custom action text
     * @artifactType Manifest
     */
    text: string;
    /**
     * Defines the position of the action relative to other actions.
     * @artifactType Manifest
     */
    position?: CustomActionPosition;
    /**
     * Relevant for extension actions; allows the definition of a target action handler.
     * @artifactType Manifest
     */
    press: string;
    /**
     * Allows you to define if the action button is visible on the screen.
     * @artifactType Manifest
     */
    visible?: boolean;
    /**
     * Allows you to define if the action should be enabled. The default value is "true".
     * @artifactType Manifest
     */
    enabled?: boolean;
}
export interface CustomActionPositionOP extends CustomActionPosition {
    /**
     * The key of another action to be used as placement anchor.
     * @artifactType Manifest
     */
    anchor?: string;
}
export interface CustomActionOP extends CustomAction {
    /**
     * Defines the position of the action relative to other actions.
     * @artifactType Manifest
     */
    position?: CustomActionPositionOP;
}
//# sourceMappingURL=CustomAction.d.ts.map