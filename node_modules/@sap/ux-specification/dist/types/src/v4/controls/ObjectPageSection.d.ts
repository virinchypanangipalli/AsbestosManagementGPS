import type { ObjectPageSectionTableV4 } from './ObjectPageTable';
import type { ObjectPageToolBar } from './ObjectPageToolBar';
import type { ObjectPageForm } from './ObjectPageForm';
import type { CustomActionOP, CustomActionPositionOP } from './CustomAction';
export interface ObjectPageSectionForm {
    /**
     * Form
     *  @isViewNode true
     */
    form?: ObjectPageForm;
}
export interface ObjectPageSectionDataPoint {
    /**
     * Data Point
     *  @isViewNode true
     */
    dataPoint?: object;
}
export interface ObjectPageSectionContact {
    /**
     * Contact
     *  @isViewNode true
     */
    contact?: object;
}
export interface ObjectPageSectionAddress {
    /**
     * Address
     *  @isViewNode true
     */
    address?: object;
}
export interface ObjectPageChart {
    /**
     * Chart Toolbar
     * @isViewNode true
     */
    toolBar?: ObjectPageToolBar;
}
export interface ObjectPageSectionChart {
    /**
     * Chart
     * @isViewNode true
     */
    chart?: ObjectPageChart;
}
export interface ObjectPageSectionPresentationVariant {
    /**
     * Presentation Variant
     */
    [key: string]: ObjectPageSectionTableV4 | ObjectPageSectionChart;
}
export type ObjectPageSection = ObjectPageSectionTableV4 | ObjectPageSectionForm | ObjectPageSectionDataPoint | ObjectPageSectionContact | ObjectPageSectionAddress | ObjectPageSectionPresentationVariant | ObjectPageSubSections;
export interface GenericSections {
    [key: string]: ObjectPageSection;
}
export interface GenericSubSections {
    [key: string]: ObjectPageSection | ObjectPageCustomSubSectionFragment;
}
/**
 * Subsections
 * @isViewNode true
 */
export interface ObjectPageSubSections {
    subsections: GenericSubSections;
}
/**
 * @displayName Placement
 */
export declare enum SectionPosition {
    After = "After",
    Before = "Before"
}
export declare enum CustomSectionViewTypesV4 {
    XML = "XML"
}
/**
 * Custom Sections
 * @isViewNode true
 */
export interface CustomSections {
    /**
     * Custom Sections
     * @isViewNode true
     */
    [key: string]: ObjectPageCustomSectionFragment;
}
export interface ObjectPageCustomSectionBase {
    /**
     * Use the key of another facet/section as a placement anchor.
     * @artifactType Manifest
     * @displayName Anchor
     */
    relatedFacet?: string;
    /**
     * Define the placement, either before or after the anchor facet/section.
     * @artifactType Manifest
     */
    relativePosition?: SectionPosition;
    /**
     * The unique ID of a section.
     * @artifactType Manifest
     */
    id: string;
    /**
     * @hidden true
     */
    type: CustomSectionViewTypesV4;
    /**
     * The label of a custom section, preferably as an i18n key.
     * @artifactType Manifest
     * @i18nClassification TIT: Custom section title
     */
    title: string;
}
export interface CustomSectionActionPositionOP extends CustomActionPositionOP {
}
export interface CustomSectionActionOP extends CustomActionOP {
    position?: CustomSectionActionPositionOP;
}
/**
 * Actions
 * @isViewNode true
 */
export interface ObjectPageCustomSectionActions {
    [id: string]: CustomSectionActionOP;
}
/**
 * Fragment
 * @isViewNode true
 */
export interface ObjectPageCustomSectionFragment extends Omit<ObjectPageCustomSectionBase, 'id' | 'type' | 'className'> {
    /**
     * The path to the XML template containing the section control.
     * @artifactType Manifest
     */
    fragmentName: string;
    actions?: ObjectPageCustomSectionActions;
}
/**
 * Custom Sub Section
 * @isViewNode true
 */
export interface ObjectPageCustomSubSectionFragment extends Omit<ObjectPageCustomSectionFragment, 'actions'> {
}
//# sourceMappingURL=ObjectPageSection.d.ts.map