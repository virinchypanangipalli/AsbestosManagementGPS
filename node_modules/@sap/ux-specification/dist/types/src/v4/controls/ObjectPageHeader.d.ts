import type { HeaderSections } from './ObjectPageHeaderSection';
import type { ActionAfterExecutionConfiguration } from '../webapp/manifest/ManifestSettings';
import type { CustomActionOP, CustomActionPositionOP } from './CustomAction';
export interface ActionAfterExecutionConfigurationObjectPageHeader extends ActionAfterExecutionConfiguration {
}
export interface CustomHeaderActionPositionOP extends CustomActionPositionOP {
}
export interface CustomHeaderActionOP extends CustomActionOP {
    position?: CustomHeaderActionPositionOP;
}
export interface ObjectPageHeaderAction {
    /**
     * Settings that are only relevant for actions (associated with a UI.DataFieldForAction annotation)
     */
    afterExecution?: ActionAfterExecutionConfigurationObjectPageHeader;
}
export interface SemanticObjectPropertyMapping {
    [id: string]: string;
}
/**
 * @isViewNode true
 */
export interface AdditionalSemanticObject {
    /**
     * You can use the allowedActions to define the exact list of semantic object links to be displayed under the Related Apps button
     */
    allowedActions?: string[];
    /**
     * The array of unavailable actions defined in the preceding settings denote those navigation actions of the semantic object which should not be displayed under the Related Apps button.
     */
    unavailableActions?: string[];
    /**
     * Mapping, defined for a semantic object, consists of key value pairs. The key defines the way in which the source application (object page) passes the context. The value represents the term used for the same entity in the target app.
     */
    mapping?: SemanticObjectPropertyMapping;
}
/**
 * You can add additional links under the "Related Apps" button by specifing additional semantic objects here.
 * @isViewNode true
 */
export interface AdditionalSemanticObjects {
    [id: string]: AdditionalSemanticObject;
}
export interface RelatedApps {
    /**
     * Set showRelatedApps to true to show the navigation button for related apps.
     */
    showRelatedApps?: boolean;
    /**
     * Additional Semantic Objects
     */
    additionalSemanticObjects: AdditionalSemanticObjects;
}
export interface ObjectPageHeaderActions {
    [id: string]: ObjectPageHeaderAction | CustomHeaderActionOP | RelatedApps;
}
/**
 * Header
 * @isViewNode true
 */
export interface ObjectPageHeader {
    /**
     * Set editableHeaderContent to true to make the header fields editable.
     */
    editableHeaderContent?: boolean;
    /**
     * Set visible to true to make the header visible.
     */
    visible?: boolean;
    /**
     * Set visible to true to make the anchor bar visible.
     */
    anchorBarVisible?: boolean;
    actions?: ObjectPageHeaderActions;
    sections?: HeaderSections;
}
//# sourceMappingURL=ObjectPageHeader.d.ts.map