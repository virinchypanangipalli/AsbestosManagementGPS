import type { TableColumn, TableColumnAction, TableCustomColumn, ViewTableColumn, ViewTableColumnAction, ViewTableCustomColumn } from '../webapp/manifest/ManifestSettings';
import type { ToolBar, ViewChartToolBar } from './ToolBar';
export declare enum SelectionMode {
    Multi = "Multi",
    None = "None",
    Single = "Single",
    Auto = "Auto"
}
export declare enum TableTypeV4 {
    ResponsiveTable = "ResponsiveTable",
    GridTable = "GridTable",
    AnalyticalTable = "AnalyticalTable",
    TreeTable = "TreeTable"
}
export declare enum InitialLoadType {
    Disabled = "Disabled",
    Enabled = "Enabled",
    Auto = "Auto"
}
export declare enum DefaultPathType {
    Primary = "primary",
    Secondary = "secondary",
    Both = "both"
}
export interface PersonalizationType {
    /**
     * Defines whether the user can add and remove columns to a given table.
     */
    column?: boolean;
    /**
     * Defines whether the user can sort a given table.
     */
    sort?: boolean;
    /**
     * Defines whether the user can filter data of a given table.
     */
    filter?: boolean;
}
export interface ViewPersonalizationType {
    /**
     * Defines whether the user can add and remove columns to a given table.
     */
    column?: boolean;
    /**
     * Defines whether the user can sort a given table.
     */
    sort?: boolean;
    /**
     * Defines whether the user can filter data of a given table.
     */
    filter?: boolean;
}
export interface AnnotationPathAsObject {
    annotationPath: string;
}
export interface AnnotationPathWithKey {
    key: string;
    annotationPath: string;
    entitySet?: string;
}
export interface QuickVariantSelectionV4 {
    /**
     * List of annotation paths referring to SelectionVariant annotations
     */
    paths: AnnotationPathAsObject[];
    /**
     * You can hide the table and display only the titles of the tabs. To do so, add the hideTableTitle option and set it to true.
     */
    hideTableTitle?: boolean;
    /**
     * You can show the counts of entries of each view. To do so, add the showCounts option and set it to true.
     */
    showCounts?: boolean;
}
export interface GenericColumns {
    [key: string]: TableColumn | TableColumnAction | TableCustomColumn;
}
/**
 * View Columns
 * @isViewNode true
 */
export interface ViewColumns {
    [key: string]: ViewTableColumn | ViewTableColumnAction | ViewTableCustomColumn;
}
export interface TableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV4;
    /**
     * Allows you to enable or disable row selection and choose between single or multiple row selection.
     *
     * - Auto: This type is now deprecated. Choose any of the following modes.
     * - Multi (default): This type allows multiple table selections if relevant actions are available in the toolbar. In edit mode, multiple selection is possible with the delete button.
     * - Single: This type allows single table selection if relevant actions are available in the toolbar. In edit mode, multiple selection is possible with the Delete button.
     * - None: No table selection is possible in display mode. In edit mode, the selection (including multiple row selection) is still possible when the Delete button is available in the table toolbar.
     */
    selectionMode?: SelectionMode;
    /**
     * The selectAll configuration overrides the selectionLimit and allows the user to select all the items. When set to true, the select all feature is enabled: a checkbox in the table header is displayed which selects all items when clicked.
     */
    selectAll?: boolean;
    /**
     * You can define how many items can be selected at a time using the selectionLimit.
     */
    selectionLimit?: number;
    /**
     * By default, export is enabled in the List Report and on the Object Page. When enabled, the Export button is displayed in the table toolbar.
     *
     */
    enableExport?: boolean;
    /**
     * With quickVariantSelection you can switch on the multiple view feature (single table mode). It links to SelectionVariant (filters) or SelectionPresentationVariant (filters and sorters) you must have added to your annotations beforehand.
     */
    quickVariantSelection?: QuickVariantSelectionV4;
    /**
     * Allows you to set the content density to condensed for ui.table on the List Report and Object Page.
     */
    condensedTableLayout?: boolean;
    /**
     *  Leading property that decides between either a recursive hierarchy or data aggregation.
     */
    hierarchyQualifier?: string;
    /**
     * By default, the column width is calculated based on the type of the content. You can include the column header in the width calculation using the widthIncludingColumnHeader setting in the manifest.json.
     */
    widthIncludingColumnHeader?: boolean;
    /**
     * By default, the Copy to Clipboard button is displayed in the table toolbar if the selection mode, such as single selection or multi selection, is configured for the corresponding table. However, you can also configure the visibility of the Copy to Clipboard button by the following property.
     */
    disableCopyToClipboard?: boolean;
}
export type ViewTypeV4 = LRTableView | LRChartView | TableViewExtension | boolean;
/**
 * Views
 * @isViewNode true
 */
export interface MultiTableModeV4 {
    /**
     * List of annotation paths
     */
    [key: string]: ViewTypeV4;
    /**
     * You can show the counts of entries of each view. To do so, add the showCounts option and set it to true.
     */
    showCounts?: boolean;
}
/**
 * Chart View
 * @isViewNode true
 */
export interface ALPChartView {
    /**
     * The primary annotation path can be either UI.Chart, UI.PresentationVariant, or UI.SelectionPresentationVariant.
     */
    annotationPath: string;
    /**
     * Chart Toolbar
     * @isViewNode true
     */
    toolBar?: ViewChartToolBar;
}
export interface CommonViewSettings {
    /**
     * Unique tab identifier.
     * @hidden true
     */
    key: string;
    /**
     * @hidden true
     */
    index: number;
    /**
     * To use charts in multiple table mode, define a UI.Chart annotation, including a qualifier.
     * Reference the UI.Chart annotation in your SelectionPresentationVariant or PresentationVariant for your view.
     */
    annotationPath: string;
    /**
     * Each chart can be based on a different entitySet.
     */
    entitySet?: string;
}
/**
 * Chart View
 * @isViewNode true
 */
export interface LRChartView extends CommonViewSettings {
    /**
     * Chart Toolbar
     * @isViewNode true
     */
    toolBar?: ViewChartToolBar;
    /**
     * Specifies whether the view is visible or not
     */
    visible?: boolean;
}
/**
 * Table View
 * @isViewNode true
 */
export interface ALPTableView extends TableSettings {
    /**
     * The secondary annotation path can be either UI.LineItem, UI.PresentationVariant, or UI.SelectionPresentationVariant.
     */
    annotationPath: string;
    /**
     * Allows you to define whether or not the data in the table is automatically loaded
     *
     * - Auto (default): An initial load of data only occurs if some default filter values have been set in the filter bar
     * - Enabled: An initial load of data occurs for the standard variant
     * - Disabled: An initial load of data does not occur for the standard variant, and the user has to actively click the Go button.
     */
    initialLoad?: InitialLoadType;
    /**
     * Defines the personalization mode, currently only effective if variant management on page is either set to Page or Control.
     * By default all table settings are enabled. You can change this for the different parts of the table by setting the properties "Column", "Sort" and "Filter" accordingly.
     * Omitting a property is treated as false, this allows apps to avoid getting new features like grouping in upcoming releases.
     */
    personalization?: ViewPersonalizationType;
    /**
     * Table Toolbar
     */
    toolBar?: ToolBar;
    columns?: ViewColumns;
}
/**
 * Table View Extension
 * @isViewNode true
 */
export interface TableViewExtension {
    /**
     * Unique tab identifier.
     * @hidden true
     */
    key: string;
    /**
     * @hidden true
     */
    index: number;
    /**
     * View title (localization supported).
     * @i18nClassification TIT: Custom view title
     */
    label?: string;
    /**
     * The name contains sap.app.id as a prefix, followed by the path in the app/webapp folder and the name of the XML view.
     */
    template: string;
    /**
     * Specifies whether the view is visible or not
     */
    visible?: boolean;
}
/**
 * Table View
 * @isViewNode true
 */
export interface LRTableView extends TableSettings {
    /**
     * Unique tab identifier.
     * @hidden true
     */
    key: string;
    /**
     * @hidden true
     */
    index: number;
    /**
     * The annotation path can be either UI.LineItem, UI.PresentationVariant, or UI.SelectionPresentationVariant.
     */
    annotationPath: string;
    /**
     * Each table can be based on a different entitySet.
     */
    entitySet?: string;
    /**
     *  The tab keeps the default LineItem ID (without the key), so the variant is applied to it.
     */
    keepPreviousPersonalization?: boolean;
    /**
     * Defines the personalization mode, currently only effective if variant management on page is either set to Page or Control.
     * By default all table settings are enabled. You can change this for the different parts of the table by setting the properties "Column", "Sort" and "Filter" accordingly.
     * Omitting a property is treated as false, this allows apps to avoid getting new features like grouping in upcoming releases.
     */
    personalization?: ViewPersonalizationType;
    /**
     * Table Toolbar
     */
    toolBar?: ToolBar;
    /**
     * Columns
     */
    columns?: ViewColumns;
    /**
     * Specifies whether the view is visible or not
     */
    visible?: boolean;
}
/**
 * Table
 * @isViewNode true
 */
export interface Table extends TableSettings {
    /**
     * The secondary annotation path can be either UI.LineItem, UI.PresentationVariant, or UI.SelectionPresentationVariant.
     */
    annotationPath?: string;
    /**
     * Allows you to define whether or not the data in the table is automatically loaded
     *
     * - Auto (default): An initial load of data only occurs if some default filter values have been set in the filter bar
     * - Enabled: An initial load of data occurs for the standard variant
     * - Disabled: An initial load of data does not occur for the standard variant, and the user has to actively click the Go button.
     */
    initialLoad?: InitialLoadType;
    /**
     * Defines the personalization mode, currently only effective if variant management on page is either set to Page or Control.
     * By default all table settings are enabled. You can change this for the different parts of the table by setting the properties "Column", "Sort" and "Filter" accordingly.
     * Omitting a property is treated as false, this allows apps to avoid getting new features like grouping in upcoming releases.
     */
    personalization?: PersonalizationType;
    views?: MultiTableModeV4;
    /**
     * Tool Bar
     */
    toolBar?: ToolBar;
    columns?: GenericColumns;
}
//# sourceMappingURL=Table.d.ts.map