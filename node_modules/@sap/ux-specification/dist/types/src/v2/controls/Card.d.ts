import type { ColorPaletteType, ObjectStreamCardsSettingsDef, SapOvpPlotAreaDef, SapOvpTabSetting, SapOvpTimeAxisDef } from '../../common';
export interface DefaultSpanObject {
    /**
     * Represents the number of the number of grid columns
     */
    cols: number;
    /**
     * Represents the number of the number of grid rows
     */
    rows: number;
    /**
     * Represents if user wants to show only header part of card in resizable layout
     */
    showOnlyHeader?: boolean;
    /**
     * If user wants to show more text in title then he/she can configure no of lines to be shown in title(Maximum allowed 3 lines)
     */
    minimumTitleRow?: number;
    /**
     * If user wants to show more text in title then he/she can configure no of lines to be shown in sub-title(Maximum allowed 2 lines)
     */
    minimumSubTitleRow?: number;
}
export interface CommonCardSettings {
    /**
     * Represents the dominant entity set that will be displayed in the given card.
     */
    entitySet?: string;
    /**
     * The language-dependent title of the card, used in the card header.
     * @i18nClassification TIT: Title of the card, used in the card header
     */
    title: string;
    /**
     * The language-dependent subtitle of the card, used in the card header.
     * @i18nClassification TIT: Subtitle of the card, used in the card header
     */
    subTitle?: string;
    /**
     * Represents the annotation path.
     */
    annotationPath?: string;
    /**
     * Represents the identification annotation path.
     */
    identificationAnnotationPath?: string;
    /**
     * Represents the data point annotation path.
     */
    dataPointAnnotationPath?: string;
    /**
     * Represents the selection annotation path.
     */
    selectionAnnotationPath?: string;
    /**
     * Represents the presentation annotation path.
     */
    presentationAnnotationPath?: string;
    /**
     * Represents the selection presentation annotation path.
     */
    selectionPresentationAnnotationPath?: string;
    /**
     * Represents the KPI annotation path.
     */
    kpiAnnotationPath?: string;
    /**
     * The category of the card, as used in the card header.
     */
    category?: string;
    /**
     * To load cards with specific requirements, define a default size as part of the card definition in the descriptor file.
     */
    defaultSpan?: DefaultSpanObject | 'auto';
    /**
     * Define an authorization check at card level.
     */
    requireAppAuthorization?: string;
    /**
     * Represents the card with view switch control.
     */
    tabs?: SapOvpTabSetting[];
    /**
     * add $Select parameter in data fetch URL
     */
    addODataSelect?: boolean;
    /**
     * Defines the property by which the list shall be sorted.
     */
    sortBy?: string;
    /**
     * Sort order (ascending or descending)
     */
    sortOrder?: 'ascending' | 'descending';
    /**
     * Represents the dynamic subtitle annotation path.
     */
    dynamicSubtitleAnnotationPath?: string;
    /**
     * Show or hide refresh option under card more actions, default value is true.
     */
    showRefresh?: boolean;
    /**
     * Represents the flag to indicate the use of object number/smart field.
     */
    enableLocaleCurrencyFormatting?: boolean;
    /**
     * Represents a switch to Show or Hide Filters in Cards Headers in OVP application.
     */
    showFilterInHeader?: boolean;
    /**
     * Represents a switch to Show or Hide Sorting in Cards Headers in OVP application.
     */
    showSortingInHeader?: boolean;
    /**
     * Custom parameters for intent-based navigation to the target application.
     * Enter the name of the custom parameter function defined in your custom controller file.
     */
    customParams?: string;
}
export declare enum ChartCardType {
    cardBubble = "cardBubble",
    cardchartsline = "cardchartsline",
    cardchartsdonut = "cardchartsdonut"
}
export declare enum CardTemplateType {
    analytical = "sap.ovp.cards.charts.analytical",
    analyticalv4 = "sap.ovp.cards.v4.charts.analytical",
    list = "sap.ovp.cards.list",
    listv4 = "sap.ovp.cards.v4.list",
    linklist = "sap.ovp.cards.linklist",
    linklistv4 = "sap.ovp.cards.v4.linklist",
    table = "sap.ovp.cards.table",
    tablev4 = "sap.ovp.cards.v4.table",
    stack = "sap.ovp.cards.stack"
}
export declare const cardTemplateTypeMap: {
    'sap.ovp.cards.charts.analytical': string;
    'sap.ovp.cards.v4.charts.analytical': string;
    'sap.ovp.cards.list': string;
    'sap.ovp.cards.v4.list': string;
    'sap.ovp.cards.linklist': string;
    'sap.ovp.cards.v4.linklist': string;
    'sap.ovp.cards.table': string;
    'sap.ovp.cards.v4.table': string;
    'sap.ovp.cards.stack': string;
};
export declare const cardTemplateSettingsMap: {
    'sap.ovp.cards.charts.analytical': string;
    'sap.ovp.cards.v4.charts.analytical': string;
};
export declare enum CardSettingsType {
    analyticalCardSettings = "analyticalCardSettings",
    analyticalCardSettingsv4 = "analyticalCardSettingsv4",
    listCardSettings = "listCardSettings",
    listCardSettingsv4 = "listCardSettingsv4",
    stackCardSettings = "stackCardSettings",
    linkListCardSettings = "linkListCardSettings",
    tableCardSettings = "tableCardSettings",
    tableCardSettingsv4 = "tableCardSettingsv4"
}
export declare enum MeasureAggregateValues {
    average = "average",
    max = "max",
    min = "min",
    sum = "sum",
    count = "$count"
}
export interface MeasureAggregateSettings {
    Axis1?: MeasureAggregateValues;
    Axis2?: MeasureAggregateValues;
    Axis3?: MeasureAggregateValues;
}
/**
 * Custom Card
 * @isViewNode true
 */
export interface CustomCard {
    /**
     * Represents the model for the card
     */
    model: string;
    /**
     * Represents the card component path to use for this card.
     * @TJS-pattern ^(?!(sap.ovp.cards.charts.analytical|sap.ovp.cards.v4.charts.analytical|sap.ovp.cards.linklist|sap.ovp.cards.v4.linklist|sap.ovp.cards.list|sap.ovp.cards.v4.list|sap.ovp.cards.stack|sap.ovp.cards.table|sap.ovp.cards.v4.table)$).*$
     */
    template: string;
    /**
     * Represents the properties that are passed to the custom card.
     */
    settings?: CustomCardSettings;
}
/**
 * List Card
 * @isViewNode true
 * @controlProperty template
 */
export interface ListCard {
    /**
     * Represents the model for the List Card
     */
    model: string;
    /**
     * Represents the card component path to use for this List Card.
     */
    template: CardTemplateType.list | CardTemplateType.listv4;
    /**
     * Represents the properties that are passed to the list card.
     */
    settings?: ListCardSettings;
}
/**
 * Stack Card
 * @isViewNode true
 * @controlProperty template
 */
export interface StackCard {
    /**
     * Represents the model for the StackCard.
     */
    model: string;
    /**
     * Represents the Stack Card component path to use for this card.
     */
    template: CardTemplateType.stack;
    /**
     * Represents the properties that are passed to the stack card.
     */
    settings?: StackCardSettings;
}
/**
 * Link List Card
 * @isViewNode true
 * @controlProperty template
 */
export interface LinklistCard {
    /**
     * Represents the model for the Link list Card.
     */
    model?: string;
    /**
     * Represents the Link list Card component path to use for this card.
     */
    template: CardTemplateType.linklist | CardTemplateType.linklistv4;
    /**
     * Represents the properties that are passed to the link list card.
     */
    settings?: LinkListCardSettings;
}
/**
 * Table Card
 * @isViewNode true
 * @controlProperty template
 */
export interface TableCard {
    /**
     * Represents the model for the TableCard.
     */
    model: string;
    /**
     * Represents the Table Card component path to use for this card.
     */
    template: CardTemplateType.table | CardTemplateType.tablev4;
    /**
     * Represents the properties that are passed to the table card.
     */
    settings?: TableCardSettings;
}
/**
 * Analytical Card
 * @isViewNode true
 * @controlProperty template
 */
export interface AnalyticalCard {
    /**
     * Represents the model for the Analytical Card
     */
    model: string;
    /**
     * Represents the Analytical Card component path to use for this card.
     */
    template: CardTemplateType.analytical | CardTemplateType.analyticalv4;
    /**
     * Represents the properties that are passed to the analytical card.
     */
    settings?: AnalyticalCardSettings | AnalyticalCardSettingsv4;
}
export type CardNavigationType = 'dataPointNav' | 'chartNav' | 'headerNav' | 'noHeaderNav';
/**
 * @displayName settings
 */
export type CustomCardSettings = CommonCardSettings;
/**
 * @displayName settings
 */
export interface AnalyticalCardSettings extends CommonCardSettings {
    /**
     * Represents the chart annotation path.
     */
    chartAnnotationPath?: string;
    /**
     * Represents the flag to indicate priority of number formatting over sap text.
     */
    ignoreSapText?: boolean;
    /**
     * Removes the option to add cards to the Insights section.
     */
    enableAddToInsights?: boolean;
    /**
     * Represents the configuration to alter the navigation mode in OVP Analytical Cards.
     */
    navigation?: CardNavigationType;
    /**
     * Represents things like people, number of items.
     */
    valueSelectionInfo?: string;
    /**
     * This property is responsible for setting specific chart settings.
     */
    chartProperties?: {
        plotArea?: SapOvpPlotAreaDef;
        timeAxis?: SapOvpTimeAxisDef;
    };
    /**
     * Color palette for semantic coloring.
     * @controlProperty colorPaletteType
     */
    colorPalette?: ColorPaletteType;
    /**
     * Enables the configuration of an analytical card with column stack chart, to map the dimension values to specific colors
     */
    bEnableStableColors?: boolean;
}
/**
 * @displayName settings
 */
export interface AnalyticalCardSettingsv4 extends AnalyticalCardSettings {
    /**
     *
     */
    measureAggregate?: MeasureAggregateSettings;
}
export declare enum ListFlavorType {
    standard = "standard",
    bar = "bar",
    carousel = "carousel"
}
export declare enum ListTypeType {
    extended = "extended",
    condensed = "condensed"
}
export declare enum SortOrderType {
    ascending = "ascending",
    descending = "descending"
}
/**
 * @displayName settings
 */
export interface ListCardSettings extends CommonCardSettings {
    /**
     * Represents the flavor of the list to use in this card. The flavor can be bar chart, carousel or standard.
     */
    listFlavor?: ListFlavorType;
    /**
     * Represents the type of list to use for this card. The list can be extended to display more information or condensed to take up less space on the card.
     */
    listType?: ListTypeType;
    /**
     * Flag for show line item detail in list and table card.
     */
    showLineItemDetail?: boolean;
    /**
     * Removes the option to add cards to the Insights section.
     */
    enableAddToInsights?: boolean;
    /**
     * Flag for enabling images in a condensed list card.
     */
    imageSupported?: boolean;
    /**
     * Represents things like people, number of items.
     */
    valueSelectionInfo?: string;
}
/**
 * @displayName settings
 */
export interface StackCardSettings extends CommonCardSettings {
    /**
     * Represents the user defined string in placeholder card.
     */
    itemText?: string;
    /**
     * The navigation property used to display information from a secondary entity set.
     */
    objectStreamCardsNavigationProperty?: string;
    /**
     * Configures additional settings for the cards displayed in the object stream.
     */
    objectStreamCardsSettings?: ObjectStreamCardsSettingsDef;
}
/**
 * @displayName settings
 */
export interface TableCardSettings extends CommonCardSettings {
    /**
     * Flag for show line item detail in list and table card.
     */
    showLineItemDetail?: boolean;
    /**
     * Removes the option to add cards to the Insights section.
     */
    enableAddToInsights?: boolean;
    /**
     * Represents things like people, number of items.
     */
    valueSelectionInfo?: string;
}
export declare enum LinkListFlavorType {
    standard = "standard",
    carousel = "carousel"
}
/**
 * @displayName settings
 */
export interface LinkListCardSettings extends CommonCardSettings {
    /**
     * listFlavor represents the flavor of the list to use in this card. The flavor can be bar chart, carousel or standard.
     */
    listFlavor?: LinkListFlavorType;
    /**
     * headerAnnotationPath represents the path to a HeaderInfo annotation.
     */
    headerAnnotationPath?: string;
    /**
     * staticContent represents the static content of a static link list card.
     */
    staticContent?: StaticContent[];
}
export interface StaticContent {
    /**
     * The language-dependent title of the StaticContent.
     * @i18nClassification TIT: Title of the StaticContent
     */
    title: string;
    /**
     * The language-dependent subtitle of the StaticContent.
     * @i18nClassification TIT: Subtitle of the StaticContent
     */
    subTitle?: string;
    /**
     * The uri for the image of the StaticContent.
     */
    imageUri?: string;
    /**
     * The uri for the target of the StaticContent.
     */
    targetUri?: string;
    /**
     * The alternative text for the image of the StaticContent.
     * @i18nClassification ALT: The alternative text for the image of the StaticContent
     */
    imageAltText?: string;
    /**
     * Used to provide intent based navigation.
     */
    semanticObject?: string;
    /**
     * Used to provide intent based navigation.
     */
    action?: string;
    /**
     * Open static content in a new window.
     */
    openInNewWindow?: boolean;
}
//# sourceMappingURL=Card.d.ts.map