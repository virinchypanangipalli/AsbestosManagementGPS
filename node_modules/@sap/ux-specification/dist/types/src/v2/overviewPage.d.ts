import type { DateRangeType, FilterType, DefaultDateRange, DateRange, ListCard, AnalyticalCard, StackCard, LinklistCard, TableCard, CustomCard } from './controls';
/**
 * @isViewNode false
 */
export interface SelectedValues {
    /**
     * The selectedValues property is a set of standard date range values that you want to include or exclude.
     */
    selectedValues?: DateRangeType[];
    /**
     * The exclude property is set to True by default. This means excluding all values given as selectedValues from the list of date range filters. If the exclude property is set to False, the application shows only selected values in the list of date range filters.
     */
    exclude?: boolean;
    /**
     * This property references a JS class, which you use to modify the date range value list. You can either remove standard data range values or add custom values.
     * The customDateRangeImplementation setting takes priority followed by filter and selectedValues when excluding date range types.
     */
    customDateRangeImplementation?: string;
    /**
     * You can use the filter settings to include and exclude specific date range values.
     */
    filter?: FilterType[];
    /**
     * You can set a default value for semantic date range.
     */
    defaultValue?: DefaultDateRange;
}
export interface DateRangeOVP extends DateRange {
    /**
     * For a fields' list you can define the set of standard date range values separately.
     */
    fields?: {
        [field: string]: SelectedValues;
    };
}
export type FilterSettingsType = {
    /**
     * Represents the object to store date type filter fields configuration
     */
    dateSettings?: DateRangeOVP;
};
declare enum LoadDataOnAppLaunchType {
    always = "always",
    never = "never",
    ifAnyFilterExist = "ifAnyFilterExist"
}
export type DataLoadSettingsType = {
    /**
     * Data load behaviour options on application launch. The default value is 'always'.
     */
    loadDataOnAppLaunch?: LoadDataOnAppLaunchType;
    [k: string]: unknown;
};
export declare enum ContainerLayoutType {
    fixed = "fixed",
    resizable = "resizable"
}
export type CardType = ListCard | AnalyticalCard | StackCard | LinklistCard | TableCard | CustomCard;
export interface ChartSettingsType {
    /**
     * Flag to enable data labels on analytical charts. The default value is false.
     */
    showDataLabel?: boolean;
}
export type ResizableLayoutVariantType = {};
export {};
//# sourceMappingURL=overviewPage.d.ts.map