import type { XsnCompileModel } from '@sap/cds-compiler-types';
import type { CdsCompilerFacade } from './facade';
export type FileContent = string;
export interface File {
    fileUri: string;
    fileContent: FileContent;
}
/**
 * get CDS 'compile model'
 *  - we are using an internal cds compiler call (from a fixed version of cds compiler package)!
 * @param project
 * @param files
 */
export declare const compileWithBundledCompiler: (root: string, files: string[], cache?: Map<string, File>) => Promise<XsnCompileModel>;
export declare function compile(root: string, files: string[], cache?: Map<string, string>): Promise<XsnCompileModel>;
/**
 *
 * @param root Project root
 * @param files List of CDS model entrypoints
 * @param cache File content cache
 */
export declare function createCdsCompilerFacadeForRoot(root: string, files: string[], cache?: Map<string, string>): Promise<CdsCompilerFacade>;
interface CdsFacade {
    env: {
        for: (mode: string, path: string) => CdsEnvironment;
    };
    load: (paths: string | string[]) => Promise<{
        $sources: string[];
    }>;
    resolve: ResolveWithCache;
    root: string;
    version: string;
    home: string;
}
interface ResolveWithCache {
    (files: string | string[], options?: {
        skipModelCache: boolean;
        root: string;
    }): string[];
    cache: Record<string, {
        cached: Record<string, string[]>;
        paths: string[];
    }>;
}
interface CdsEnvironment {
    folders?: CapCustomPaths;
}
interface CapCustomPaths {
    app: string;
    db: string;
    srv: string;
}
/**
 * Get a reference to the compiler module (@sap/cds-compiler) installed in the Fiori elements project.
 * @param root - project root, where the package.json is
 */
export declare function getCdsCompiler(root: string): Promise<{
    compiler: unknown;
    home: string;
    cds: CdsFacade;
}>;
export declare function getCdsFiles(root: string, clearCache?: boolean): Promise<string[]>;
export {};
//# sourceMappingURL=compile.d.ts.map