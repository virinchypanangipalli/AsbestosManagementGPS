import type { MetadataElement } from '@sap-ux/odata-annotation-core-types';
import type { CdsCompilerFacade } from '..';
export declare const RETURN_PARAM_NAME = "$Return";
export declare const TYPE_NAME_OF_BINDING_PARAMETER = "$self";
export declare const IS_ACTIVE_ENTITY_ELEM_NAME = "IsActiveEntity";
export declare const HAS_ACTIVE_ENTITY_ELEM_NAME = "HasActiveEntity";
export declare const ENTITY_PREFIX_LOCALIZED = "localized.";
export declare const ASSOCIATION_NAME_LOCALIZED = "localized";
export interface MetadataElementWithParentKey {
    node: MetadataElement;
    parentKey?: string;
}
/**
 * Map representing already collected metadata
 * Key string represents "cds-path" (e.g. "AdminService.SafetyIncidents/ID")
 *  - segments are separated by '/'
 *  - first segment is fully qualified name of entity or (unbound) action/function
 *  - followup segments can represent element names, names of (bound) actions/function, and their parameter names (including "in" and "$Return")
 *  - segments representing actions/functions have postfix "()" to avoid name collisions (e.g. "OrderService.cancelOrder()")
 */
export type MetadataElementMap = Map<string, MetadataElementWithParentKey>;
/**
 * Used to build up metadata in a lazy way
 * If metadataElementMap does not contain a metadata element, it is build up (including all parents) based on facade methods
 */
export interface MetadataCollector {
    metadataElementMap: MetadataElementMap;
    facade?: CdsCompilerFacade;
    draftNodesPerService: Map<string, Set<string>>;
}
/**
 * Create MetadataCollector instance
 * @param metadataElementMap
 * @param facade
 */
export declare const createMetadataCollector: (metadataElementMap?: MetadataElementMap, facade?: CdsCompilerFacade) => MetadataCollector;
/**
 * Get MetadataCollector instance
 * @param metadataElementMap
 */
export declare function getMetadataCollector(metadataElementMap?: MetadataElementMap): MetadataCollector;
/**
 * Get array of metadata elements (to be handed over to generic component)
 * @param metadataElementMap
 */
export declare const getMetadataElementsFromMap: (metadataElementMap: MetadataElementMap) => MetadataElement[];
//# sourceMappingURL=types.d.ts.map