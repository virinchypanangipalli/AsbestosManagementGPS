"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataElementsFromMap = exports.getMetadataCollector = exports.createMetadataCollector = exports.ASSOCIATION_NAME_LOCALIZED = exports.ENTITY_PREFIX_LOCALIZED = exports.HAS_ACTIVE_ENTITY_ELEM_NAME = exports.IS_ACTIVE_ENTITY_ELEM_NAME = exports.TYPE_NAME_OF_BINDING_PARAMETER = exports.RETURN_PARAM_NAME = void 0;
exports.RETURN_PARAM_NAME = '$Return';
exports.TYPE_NAME_OF_BINDING_PARAMETER = '$self';
exports.IS_ACTIVE_ENTITY_ELEM_NAME = 'IsActiveEntity';
exports.HAS_ACTIVE_ENTITY_ELEM_NAME = 'HasActiveEntity';
exports.ENTITY_PREFIX_LOCALIZED = 'localized.'; // prefix of generated entity to support localization of texts
exports.ASSOCIATION_NAME_LOCALIZED = 'localized'; // generated associations to localized entity
/**
 * Create MetadataCollector instance
 * @param metadataElementMap
 * @param facade
 */
const createMetadataCollector = (metadataElementMap, facade) => {
    const metadataCollector = getMetadataCollector(metadataElementMap);
    if (facade) {
        metadataCollector.facade = facade;
    }
    return metadataCollector;
};
exports.createMetadataCollector = createMetadataCollector;
/**
 * Get MetadataCollector instance
 * @param metadataElementMap
 */
function getMetadataCollector(metadataElementMap) {
    return {
        metadataElementMap: metadataElementMap || new Map(),
        draftNodesPerService: new Map()
    };
}
exports.getMetadataCollector = getMetadataCollector;
/**
 * Get array of metadata elements (to be handed over to generic component)
 * @param metadataElementMap
 */
const getMetadataElementsFromMap = (metadataElementMap) => {
    // only entries without parent are relevant; remaining entries are in contained in their content[]
    const result = [...metadataElementMap.keys()]
        .filter((key) => !metadataElementMap?.get(key)?.parentKey)
        .map((key) => metadataElementMap?.get(key)?.node);
    return result.filter((val) => val !== undefined);
};
exports.getMetadataElementsFromMap = getMetadataElementsFromMap;
//# sourceMappingURL=types.js.map