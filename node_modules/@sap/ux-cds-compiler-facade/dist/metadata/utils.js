"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceNameForEntity = exports.getAssociation = void 0;
const utils_1 = require("../utils");
function isToMany(finalType) {
    let isToMany = false;
    let artifact;
    // cds-compiler v2*
    artifact = finalType;
    if (!artifact.cardinality) {
        if (artifact._origin?.cardinality) {
            artifact = artifact._origin;
        }
        else if (artifact.type?._artifact?.cardinality) {
            artifact = artifact?.type?._artifact;
        }
    }
    if (artifact?.cardinality?.targetMax) {
        const targetMax = artifact.cardinality.targetMax;
        isToMany = targetMax.literal === 'string' && targetMax.val === '*';
    }
    return isToMany;
}
function getAssociation(element, compiler) {
    let result;
    function isComposition(element, compiler) {
        if (element?.type?._artifact) {
            const namedObj = (0, utils_1.getNameObj)(element.type?._artifact, compiler);
            return namedObj.absolute === 'cds.Composition';
        }
        else {
            return false;
        }
    }
    if (element) {
        const finalEffectiveType = element?._effectiveType;
        let targetNamed;
        if (finalEffectiveType?.kind === 'element') {
            targetNamed = finalEffectiveType?.target?._artifact;
            if (targetNamed?.name && ['entity', 'view'].includes(targetNamed?.kind)) {
                result = {
                    target: (0, utils_1.getNameObj)(targetNamed, compiler).absolute,
                    isToMany: isToMany(finalEffectiveType),
                    isComposition: isComposition(element, compiler)
                };
            }
        }
    }
    return result;
}
exports.getAssociation = getAssociation;
const getServiceNameForEntity = (entity, compileModel) => {
    let serviceFound = false;
    const segments = (0, utils_1.getNameObj)(entity, compileModel?.compiler).absolute.split('.');
    segments.pop();
    let serviceName = '';
    for (let i = 0; i < segments.length && !serviceFound; i++) {
        serviceName += serviceName ? '.' + segments[i] : segments[i];
        serviceFound = compileModel?.definitions[serviceName].kind === 'service';
    }
    return serviceFound ? serviceName : '';
};
exports.getServiceNameForEntity = getServiceNameForEntity;
//# sourceMappingURL=utils.js.map