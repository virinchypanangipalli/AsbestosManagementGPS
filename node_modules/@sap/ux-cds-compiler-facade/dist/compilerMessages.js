"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompilerErrorMessages = void 0;
const path_1 = require("path");
const os = __importStar(require("os"));
const odata_annotation_core_types_1 = require("@sap-ux/odata-annotation-core-types");
const transform_1 = require("./transform");
const cds_1 = require("./cds");
const cdsSource_1 = require("./cdsSource");
function getCompilerErrorMessages(projectRoot, compileModel) {
    const cache = new Map();
    const fileUris = Object.keys(compileModel.sources);
    let root = projectRoot || '';
    if (root && os.platform() === 'win32' && !fileUris.some((uri) => uri.startsWith(root.at(0)))) {
        root = (0, cdsSource_1.toggleCase)(root.at(0)) + root.substring(1); // adapt drive letter
    }
    for (const sourceUri of fileUris) {
        const source = compileModel.sources[sourceUri];
        const messages = (source?.options?.messages ?? []).filter((compileMessage) => {
            const fileName = compileMessage?.$location?.file;
            return fileName && (0, path_1.join)(root, fileName) === sourceUri;
        });
        for (const message of messages) {
            const fileName = message?.$location?.file;
            if (!cache.has(fileName)) {
                cache.set(fileName, { hasSyntaxErrors: false, messages: [] });
            }
            const fileEntry = cache.get(fileName);
            const diagnostic = {
                message: message.message,
                severity: cds_1.severityMap[message.severity] ?? odata_annotation_core_types_1.DiagnosticSeverity.Error,
                range: (0, transform_1.locationToRange)(message.$location) || odata_annotation_core_types_1.Range.create(0, 0, 0, 0)
            };
            if (diagnostic.severity === odata_annotation_core_types_1.DiagnosticSeverity.Error && fileEntry) {
                fileEntry.hasSyntaxErrors = true;
            }
            fileEntry?.messages.push(diagnostic);
        }
    }
    return cache;
}
exports.getCompilerErrorMessages = getCompilerErrorMessages;
//# sourceMappingURL=compilerMessages.js.map