"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericTokenImpl = void 0;
const odata_annotation_core_types_1 = require("@sap-ux/odata-annotation-core-types");
class GenericTokenImpl {
    constructor(uri, tokenIndex, text, line, // zero-based
    character, // zero-based
    annotationValue) {
        this.uri = uri;
        this.tokenIndex = tokenIndex;
        this.text = text;
        this.line = line;
        this.character = character;
        this.annotationValue = annotationValue;
    }
    toString() {
        return `${this.text}@${this.line}:${this.character}`;
    }
    get range() {
        return odata_annotation_core_types_1.Range.create(this.line, this.character, this.line, this.character + this.text.length);
    }
    get location() {
        return odata_annotation_core_types_1.Location.create(this.uri, this.range);
    }
    compare(position) {
        let res = this.line - position.line; // We are dealing with single-line tokens only, thus no care for end line
        if (res === 0) {
            res = position.character - this.character;
            if (res < 0) {
                return 1;
            }
            // Token covers also if cursor is right after text (no two identifiers are consecutive)
            if (res <= this.text.length) {
                return 0;
            }
            return -1;
        }
        return Math.sign(res);
    }
}
exports.GenericTokenImpl = GenericTokenImpl;
//# sourceMappingURL=genericToken.js.map