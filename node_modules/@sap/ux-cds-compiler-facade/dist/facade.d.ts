import type { Token, XsnCompileModel } from '@sap/cds-compiler-types';
import type { AnnotationFile, Namespace, Reference, ServiceAnnotationFile, CompilerMessage } from '@sap-ux/odata-annotation-core';
import type { BlitzIndex, PropagatedTargetMap } from '.';
import type { Files } from './transform/ghostFiles';
import type { MetadataCollector, MetadataElementMap } from './metadata';
import type { CdsDocument } from './cdsDocument';
/**
 * To abstract the calls to undocumented functionalities of @sap/cds-compiler module
 *
 */
export interface CdsCompilerFacade {
    readonly blitzIndex: BlitzIndex;
    /**
     * gets tokens for a file.
     *
     * @param uri
     * @returns
     */
    getTokensForUri(uri: string): Token[];
    /**
     * Gets CDS document for the given file URI.
     *
     * @param uri
     */
    getCdsDocument(uri: string): CdsDocument | undefined;
    /**
     * gets map of transformed metadata from compile model artifacts.
     *
     * @param serviceName
     * @returns
     */
    getMetadata(serviceName?: string): MetadataElementMap;
    /**
     * gets propagated annotation targets.
     *
     * @param files
     * @returns
     */
    getGhostFiles(files: {
        uri: string;
        content: AnnotationFile;
    }[]): ServiceAnnotationFile[];
    /**
     * gets metadataCollector instance.
     *
     * @param metadataElementMap
     * @returns
     */
    /**
     * gets compiler errors on the project.
     *
     * @param projectRoot
     * @returns
     */
    getCompilerErrors(projectRoot: string): Map<string, CompilerMessage>;
    /**
     * gets a relative - absolute uri map.
     *
     * @returns
     */
    getUriMap(): Map<string, string>;
    /**
     * Returns file sequence from the lower layer (least important) to top layer (most important).
     * @returns
     */
    getFileSequence(): string[];
    /**
     * gets file names.
     *
     * @param serviceName
     * @returns
     */
    getFileName(serviceName: string): string | undefined;
    /**
     * gets map of propagated targets.
     *
     * @param serviceName
     * @param files
     * @returns
     */
    getPropagatedTargetMap(serviceName?: string | undefined, files?: Files[] | undefined): {
        propagationMap: PropagatedTargetMap;
        sourceUris: Set<string>;
    };
    /**
     * gets namespace and references for a given uri.
     *
     * @param uri
     * @returns {{ namespace: Namespace; references: Reference[] } | undefined}
     */
    getNamespaceAndReference(uri: string): {
        namespace: Namespace;
        references: Reference[];
    } | undefined;
    /**
     * gets all the source uris as string collection.
     *
     * @returns
     */
    getAllSourceUris(): string[];
    /**
     * gets the kind of a given service.
     *
     * @param serviceName
     * @returns
     */
    getServiceKind(serviceName: string): string;
    /**
     * Collects metadata elements for absolute path (cds syntax), returns path in EDMX syntax
     *
     * @param cdsPath - path extracted from carrier e.g. AdminService.Books.title or AdminService.Books.addRating
     * @param cdsKind - cds kind, e.g. 'entity', 'element', 'action', 'function', 'param'
     * @param metadataCollector
     * @returns path in EDMX format and key for corresponding entry in MetadataCollector
     */
    collectMetadataForAbsolutePath(cdsPath: string, cdsKind: string, metadataCollector: MetadataCollector): {
        edmxPath: string;
        collectorKey: string;
    };
    /**
     * Collects metadata elements for relative path
     *
     * @param relativePath
     * @param baseCollectorKey - key for collector entry representing base for relative path
     * @param serviceName
     * @param metadataCollector
     */
    collectMetadataForRelativePath(relativePath: string, baseCollectorKey: string, serviceName: string, metadataCollector: MetadataCollector): void;
    /**
     * convert name to edmx name (converting '.text' to '_text')
     *  - reason: generated EDMX will contain name with '_text'
     * @param name
     */
    convertNameToEdmx(name: string): string;
    /**
     * convert name from edmx name (converting '_text' to '.text')
     * @param name
     */
    convertNameFromEdmx(name: string): string | undefined;
}
/**
 * Creates a facade that calls to undocumented functionalities of @sap/cds-compiler module.
 *
 * @param XsnCompileModel
 * @returns
 */
export declare function createCdsCompilerFacade(compileModel: XsnCompileModel): CdsCompilerFacade;
//# sourceMappingURL=facade.d.ts.map