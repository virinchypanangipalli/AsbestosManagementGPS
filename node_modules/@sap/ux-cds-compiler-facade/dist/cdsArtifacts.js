"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCdsArtifacts = void 0;
const path_1 = require("path");
const facade_1 = require("./facade");
const blitzIndex_1 = require("./blitzIndex");
const metadata_1 = require("./metadata");
const compile_1 = require("./compile");
const fileSequence_1 = require("./fileSequence");
const compilerMessages_1 = require("./compilerMessages");
const getCdsArtifacts = async (root, serviceName, files, cache) => {
    if (files.length) {
        const compileModel = await (0, compile_1.compileWithBundledCompiler)(root, files, cache);
        const lspIndex = (0, blitzIndex_1.createIndex)(compileModel);
        // collect map of messages from compile model ('compile messages')
        const compileMessagesMap = (0, compilerMessages_1.getCompilerErrorMessages)(root, compileModel);
        // get metadata elements and namespaces
        const fileSequence = (0, fileSequence_1.getFileSequence)(compileModel).map((fileUri) => (0, path_1.relative)(root, fileUri));
        const facade = (0, facade_1.createCdsCompilerFacade)(compileModel);
        const metadataElementMap = (0, metadata_1.generateMetadata)(compileModel, facade, serviceName);
        const metadataCollector = (0, metadata_1.createMetadataCollector)(metadataElementMap, facade);
        return {
            fileSequence,
            compileMessagesMap,
            lspIndex,
            metadataElementMap,
            metadataIncluded: false,
            cdsCompilerFacade: facade,
            collector: metadataCollector
        };
    }
    else {
        return {
            fileSequence: [],
            lspIndex: undefined,
            compileMessagesMap: new Map(),
            metadataElementMap: new Map(),
            metadataIncluded: false,
            cdsCompilerFacade: undefined
        };
    }
};
exports.getCdsArtifacts = getCdsArtifacts;
//# sourceMappingURL=cdsArtifacts.js.map