import type { TargetKind, Location, MetadataElement, Path, ODataVersionType, MetadataServiceOptions, MetadataElementVisitor, IMetadataService } from '@sap-ux/odata-annotation-core-types';
/**
 * Metadata service
 */
export declare class MetadataService implements IMetadataService {
    /**
     * Keeps all metadata based on file level (for invalidation when file changes)
     */
    private metadata;
    /**
     * Keeps all namespaces based on file level (for invalidation when file changes)
     */
    private namespaces;
    /**
     * Mapping of action names to set of overloads on file level (for invalidation when file changes)
     */
    private actionNames;
    /**
     * Map of relative to absolute uri
     */
    private uriMap;
    /**
     * Lookup metadata element by its path.
     *
     * @param path - need to exactly match path of metadata element (i.e. function/action segment needs to contain ())
     * @returns Metadata element if it exists for the given path.
     */
    private lookup;
    /**
     *
     * @param path element path
     * @returns element location
     */
    private getMetadataElementLocationsInternal;
    /**
     * OData Version
     *   '2.0': OData 2.0
     *   '4.0': OData 4.0
     *   '': not specified (e.g. for metadata generated from CDS sources)
     */
    readonly ODataVersion: ODataVersionType | '';
    /**
     * isCds
     *   true: metadata are generated based on CDS sources
     */
    readonly isCds: boolean;
    /**
     * Metadata file URI.
     */
    fileUri: string;
    /**
     * Create new metadata service instance.
     *
     * @param options metadata service instance option
     */
    constructor(options?: MetadataServiceOptions);
    /**
     * Set map of uris from relative to absolute.
     *
     * @param uriMap A map where keys are relative URIs and values are their corresponding absolute URIs.
     */
    setUriMap(uriMap: Map<string, string>): void;
    /**
     * Import metadata.
     *
     * @param rootNodes Metadata elements.
     * @param fileUri Metadata file URI.
     *
     * The metadata is cached and invalidated (on file change) based on file level
     */
    import(rootNodes: MetadataElement[], fileUri: string): void;
    /**
     * Traverses all metadata elements and calls the specified visitor function for each element.
     *
     * @param {MetadataElementVisitor} visitElement - A function that will be called for each metadata element during traversal.
     * The function should accept a single argument, which is the metadata element being visited.
     */
    visitMetadataElements(visitElement: MetadataElementVisitor): void;
    /**
     * Returns namespaces representing metadata.
     *
     * @returns set of namespaces
     */
    getNamespaces(): Set<string>;
    /**
     * Returns all metadata root elements.
     *
     * @returns a map containing metadata root elements, where the keys are the paths and the values are the corresponding metadata elements.
     */
    getRootMetadataElements(): Map<Path, MetadataElement>;
    /**
     * Returns a specific metadata element specified by its path.
     *
     * @param path Path identifying the metadata element (conforming to EDMX, i.e. function/action segments can also be without ())
     * @returns Metadata element
     */
    getMetadataElement(path: Path): MetadataElement | undefined;
    /**
     * Get Action or Function overloads by their top level name.
     *
     * @param topLevelName First segment represents action function name.
     * @returns if first segment represents action function name (without signature).
     */
    private getActionFunctionOverloads;
    /**
     * Get OData target kinds for a metadata element.
     *
     * @param path Path identifying metadata element.
     * @returns OData target kinds.
     */
    getEdmTargetKinds(path: Path): TargetKind[];
    /**
     * Get (LSP) Locations of metadata element.
     *
     * @param path - path identifying metadata element
     * @returns Locations for the metadata element
     */
    getMetadataElementLocations(path: string): Location[];
}
//# sourceMappingURL=metadata-service.d.ts.map