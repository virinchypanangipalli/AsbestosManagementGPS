"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAstNodes = exports.getNode = exports.findAnnotationNode = exports.isReservedProperty = exports.ReservedProperties = exports.areRangesEqual = exports.copyRange = exports.copyPosition = exports.arePositionsEqual = exports.isContainer = exports.nodeRange = exports.getEdmOperatorMap = exports.containsIncorrectExpressions = exports.positionIsInExpressionWhiteSpace = exports.operatorMap = exports.IDENTIFIER_TYPE = exports.SEPARATOR_TYPE = exports.MULTI_LINE_STRING_LITERAL_TYPE = exports.QUALIFIER_TYPE = exports.QUOTED_LITERAL_TYPE = exports.TOKEN_TYPE = exports.COLLECTION_TYPE = exports.EXPRESSION_TYPES = exports.CORRECT_EXPRESSION_TYPE = exports.INCORRECT_EXPRESSION_TYPE = exports.UNSUPPORTED_OPERATOR_EXPRESSION_TYPE = exports.OPERATOR_TYPE = exports.ENUM_TYPE = exports.NUMBER_LITERAL_TYPE = exports.BOOLEAN_TYPE = exports.ANNOTATION_GROUP_TYPE = exports.ANNOTATION_GROUP_ITEMS_TYPE = exports.RECORD_TYPE = exports.ANNOTATION_TYPE = exports.STRING_LITERAL_TYPE = exports.PATH_TYPE = exports.RECORD_PROPERTY_TYPE = exports.EMPTY_VALUE_TYPE = exports.parse = void 0;
const parser_1 = require("./parser");
const transformer_1 = require("./transformer");
const parse = (text, startPosition) => {
    const { cst, tokens } = (0, parser_1.parse)(text);
    return (0, transformer_1.buildAst)(cst, tokens, startPosition);
};
exports.parse = parse;
var transformer_2 = require("./transformer");
Object.defineProperty(exports, "EMPTY_VALUE_TYPE", { enumerable: true, get: function () { return transformer_2.EMPTY_VALUE_TYPE; } });
Object.defineProperty(exports, "RECORD_PROPERTY_TYPE", { enumerable: true, get: function () { return transformer_2.RECORD_PROPERTY_TYPE; } });
Object.defineProperty(exports, "PATH_TYPE", { enumerable: true, get: function () { return transformer_2.PATH_TYPE; } });
Object.defineProperty(exports, "STRING_LITERAL_TYPE", { enumerable: true, get: function () { return transformer_2.STRING_LITERAL_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_TYPE", { enumerable: true, get: function () { return transformer_2.ANNOTATION_TYPE; } });
Object.defineProperty(exports, "RECORD_TYPE", { enumerable: true, get: function () { return transformer_2.RECORD_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_GROUP_ITEMS_TYPE", { enumerable: true, get: function () { return transformer_2.ANNOTATION_GROUP_ITEMS_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_GROUP_TYPE", { enumerable: true, get: function () { return transformer_2.ANNOTATION_GROUP_TYPE; } });
Object.defineProperty(exports, "BOOLEAN_TYPE", { enumerable: true, get: function () { return transformer_2.BOOLEAN_TYPE; } });
Object.defineProperty(exports, "NUMBER_LITERAL_TYPE", { enumerable: true, get: function () { return transformer_2.NUMBER_LITERAL_TYPE; } });
Object.defineProperty(exports, "ENUM_TYPE", { enumerable: true, get: function () { return transformer_2.ENUM_TYPE; } });
Object.defineProperty(exports, "OPERATOR_TYPE", { enumerable: true, get: function () { return transformer_2.OPERATOR_TYPE; } });
Object.defineProperty(exports, "UNSUPPORTED_OPERATOR_EXPRESSION_TYPE", { enumerable: true, get: function () { return transformer_2.UNSUPPORTED_OPERATOR_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "INCORRECT_EXPRESSION_TYPE", { enumerable: true, get: function () { return transformer_2.INCORRECT_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "CORRECT_EXPRESSION_TYPE", { enumerable: true, get: function () { return transformer_2.CORRECT_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "EXPRESSION_TYPES", { enumerable: true, get: function () { return transformer_2.EXPRESSION_TYPES; } });
Object.defineProperty(exports, "COLLECTION_TYPE", { enumerable: true, get: function () { return transformer_2.COLLECTION_TYPE; } });
Object.defineProperty(exports, "TOKEN_TYPE", { enumerable: true, get: function () { return transformer_2.TOKEN_TYPE; } });
Object.defineProperty(exports, "QUOTED_LITERAL_TYPE", { enumerable: true, get: function () { return transformer_2.QUOTED_LITERAL_TYPE; } });
Object.defineProperty(exports, "QUALIFIER_TYPE", { enumerable: true, get: function () { return transformer_2.QUALIFIER_TYPE; } });
Object.defineProperty(exports, "MULTI_LINE_STRING_LITERAL_TYPE", { enumerable: true, get: function () { return transformer_2.MULTI_LINE_STRING_LITERAL_TYPE; } });
Object.defineProperty(exports, "SEPARATOR_TYPE", { enumerable: true, get: function () { return transformer_2.SEPARATOR_TYPE; } });
Object.defineProperty(exports, "IDENTIFIER_TYPE", { enumerable: true, get: function () { return transformer_2.IDENTIFIER_TYPE; } });
Object.defineProperty(exports, "operatorMap", { enumerable: true, get: function () { return transformer_2.operatorMap; } });
Object.defineProperty(exports, "positionIsInExpressionWhiteSpace", { enumerable: true, get: function () { return transformer_2.positionIsInExpressionWhiteSpace; } });
Object.defineProperty(exports, "containsIncorrectExpressions", { enumerable: true, get: function () { return transformer_2.containsIncorrectExpressions; } });
Object.defineProperty(exports, "getEdmOperatorMap", { enumerable: true, get: function () { return transformer_2.getEdmOperatorMap; } });
Object.defineProperty(exports, "nodeRange", { enumerable: true, get: function () { return transformer_2.nodeRange; } });
Object.defineProperty(exports, "isContainer", { enumerable: true, get: function () { return transformer_2.isContainer; } });
var transformer_3 = require("./transformer");
Object.defineProperty(exports, "arePositionsEqual", { enumerable: true, get: function () { return transformer_3.arePositionsEqual; } });
Object.defineProperty(exports, "copyPosition", { enumerable: true, get: function () { return transformer_3.copyPosition; } });
Object.defineProperty(exports, "copyRange", { enumerable: true, get: function () { return transformer_3.copyRange; } });
Object.defineProperty(exports, "areRangesEqual", { enumerable: true, get: function () { return transformer_3.areRangesEqual; } });
var constants_1 = require("./constants");
Object.defineProperty(exports, "ReservedProperties", { enumerable: true, get: function () { return constants_1.ReservedProperties; } });
Object.defineProperty(exports, "isReservedProperty", { enumerable: true, get: function () { return constants_1.isReservedProperty; } });
var find_annotation_node_1 = require("./find-annotation-node");
Object.defineProperty(exports, "findAnnotationNode", { enumerable: true, get: function () { return find_annotation_node_1.findAnnotationNode; } });
Object.defineProperty(exports, "getNode", { enumerable: true, get: function () { return find_annotation_node_1.getNode; } });
Object.defineProperty(exports, "getAstNodes", { enumerable: true, get: function () { return find_annotation_node_1.getAstNodes; } });
//# sourceMappingURL=index.js.map