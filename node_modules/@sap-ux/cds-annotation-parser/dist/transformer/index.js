"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.containsIncorrectExpressions = exports.getEdmOperatorMap = exports.positionIsInExpressionWhiteSpace = exports.operatorMap = exports.areRangesEqual = exports.copyRange = exports.copyPosition = exports.arePositionsEqual = exports.isContainer = exports.nodeRange = exports.EXPRESSION_TYPES = exports.CORRECT_EXPRESSION_TYPE = exports.INCORRECT_EXPRESSION_TYPE = exports.UNSUPPORTED_OPERATOR_EXPRESSION_TYPE = exports.OPERATOR_TYPE = exports.IDENTIFIER_TYPE = exports.SEPARATOR_TYPE = exports.MULTI_LINE_STRING_LITERAL_TYPE = exports.QUALIFIER_TYPE = exports.QUOTED_LITERAL_TYPE = exports.TOKEN_TYPE = exports.COLLECTION_TYPE = exports.ENUM_TYPE = exports.NUMBER_LITERAL_TYPE = exports.BOOLEAN_TYPE = exports.ANNOTATION_GROUP_TYPE = exports.ANNOTATION_GROUP_ITEMS_TYPE = exports.RECORD_TYPE = exports.ANNOTATION_TYPE = exports.STRING_LITERAL_TYPE = exports.PATH_TYPE = exports.RECORD_PROPERTY_TYPE = exports.EMPTY_VALUE_TYPE = exports.buildAst = void 0;
var ast_1 = require("./ast");
Object.defineProperty(exports, "buildAst", { enumerable: true, get: function () { return ast_1.buildAst; } });
var annotation_ast_nodes_1 = require("./annotation-ast-nodes");
Object.defineProperty(exports, "EMPTY_VALUE_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.EMPTY_VALUE_TYPE; } });
Object.defineProperty(exports, "RECORD_PROPERTY_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.RECORD_PROPERTY_TYPE; } });
Object.defineProperty(exports, "PATH_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.PATH_TYPE; } });
Object.defineProperty(exports, "STRING_LITERAL_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.STRING_LITERAL_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.ANNOTATION_TYPE; } });
Object.defineProperty(exports, "RECORD_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.RECORD_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_GROUP_ITEMS_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.ANNOTATION_GROUP_ITEMS_TYPE; } });
Object.defineProperty(exports, "ANNOTATION_GROUP_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.ANNOTATION_GROUP_TYPE; } });
Object.defineProperty(exports, "BOOLEAN_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.BOOLEAN_TYPE; } });
Object.defineProperty(exports, "NUMBER_LITERAL_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.NUMBER_LITERAL_TYPE; } });
Object.defineProperty(exports, "ENUM_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.ENUM_TYPE; } });
Object.defineProperty(exports, "COLLECTION_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.COLLECTION_TYPE; } });
Object.defineProperty(exports, "TOKEN_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.TOKEN_TYPE; } });
Object.defineProperty(exports, "QUOTED_LITERAL_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.QUOTED_LITERAL_TYPE; } });
Object.defineProperty(exports, "QUALIFIER_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.QUALIFIER_TYPE; } });
Object.defineProperty(exports, "MULTI_LINE_STRING_LITERAL_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.MULTI_LINE_STRING_LITERAL_TYPE; } });
Object.defineProperty(exports, "SEPARATOR_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.SEPARATOR_TYPE; } });
Object.defineProperty(exports, "IDENTIFIER_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.IDENTIFIER_TYPE; } });
Object.defineProperty(exports, "OPERATOR_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.OPERATOR_TYPE; } });
Object.defineProperty(exports, "UNSUPPORTED_OPERATOR_EXPRESSION_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.UNSUPPORTED_OPERATOR_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "INCORRECT_EXPRESSION_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.INCORRECT_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "CORRECT_EXPRESSION_TYPE", { enumerable: true, get: function () { return annotation_ast_nodes_1.CORRECT_EXPRESSION_TYPE; } });
Object.defineProperty(exports, "EXPRESSION_TYPES", { enumerable: true, get: function () { return annotation_ast_nodes_1.EXPRESSION_TYPES; } });
Object.defineProperty(exports, "nodeRange", { enumerable: true, get: function () { return annotation_ast_nodes_1.nodeRange; } });
Object.defineProperty(exports, "isContainer", { enumerable: true, get: function () { return annotation_ast_nodes_1.isContainer; } });
var range_1 = require("./range");
Object.defineProperty(exports, "arePositionsEqual", { enumerable: true, get: function () { return range_1.arePositionsEqual; } });
Object.defineProperty(exports, "copyPosition", { enumerable: true, get: function () { return range_1.copyPosition; } });
Object.defineProperty(exports, "copyRange", { enumerable: true, get: function () { return range_1.copyRange; } });
Object.defineProperty(exports, "areRangesEqual", { enumerable: true, get: function () { return range_1.areRangesEqual; } });
var expressions_1 = require("./expressions");
Object.defineProperty(exports, "operatorMap", { enumerable: true, get: function () { return expressions_1.operatorMap; } });
Object.defineProperty(exports, "positionIsInExpressionWhiteSpace", { enumerable: true, get: function () { return expressions_1.positionIsInExpressionWhiteSpace; } });
Object.defineProperty(exports, "getEdmOperatorMap", { enumerable: true, get: function () { return expressions_1.getEdmOperatorMap; } });
Object.defineProperty(exports, "containsIncorrectExpressions", { enumerable: true, get: function () { return expressions_1.containsIncorrectExpressions; } });
//# sourceMappingURL=index.js.map