import type { AnnotationRecord, Apply, Collection, Expression, PropertyValue, RawAnnotation } from '@sap-ux/vocabularies-types';
import type { AliasInformation, Element, ElementChild, Target } from '@sap-ux/odata-annotation-core-types';
import type { AnnotationListWithOrigins } from './annotations';
/**
 * Convert target annotations to internal format.
 *
 * @param targetAnnotations - AVT annotation list
 * @param aliasInfo - Alias Information.
 * @returns Internal representation of the Target.
 */
export declare function convertTargetAnnotationsToInternal(targetAnnotations: AnnotationListWithOrigins, aliasInfo: AliasInformation): Target;
/**
 * Build empty target (generic annotation file format).
 *
 * @param path - Target name.
 * @returns Internal representation of the target.
 */
export declare function buildEmptyTarget(path: string): Target;
/**
 * Convert annotation to internal format.
 *
 * @param annotation - Annotation.
 * @param aliasInfo - Alias Information.
 * @returns Internal representation of the annotation.
 */
export declare function convertAnnotationToInternal(annotation: RawAnnotation, aliasInfo: AliasInformation): Element;
/**
 * Convert collection to internal format.
 *
 * @param aliasInfo - Alias Information.
 * @param collection - Collection.
 * @returns Internal representation of the collection.
 */
export declare function convertCollectionToInternal(aliasInfo: AliasInformation, collection: Collection): Element;
/**
 *
 * @param aliasInfo - Alias Information.
 * @param entry - Collection entry.
 * @returns Internal representation of the collection entry.
 */
export declare function convertCollectionElement(aliasInfo: AliasInformation, entry: Collection[number]): ElementChild | undefined;
/**
 * Convert record to internal format.
 *
 * @param aliasInfo - Alias Information.
 * @param record - Record.
 * @returns Internal representation of the record.
 */
export declare function convertRecordToInternal(aliasInfo: AliasInformation, record: AnnotationRecord): Element;
/**
 *
 * @param aliasInfo - Alias Information.
 * @param propertyValue - Property value.
 * @returns Internal representation of the property value.
 */
export declare function convertPropertyValueToInternal(aliasInfo: AliasInformation, propertyValue: PropertyValue): Element;
/**
 * Convert expression to internal representation.
 *
 * @param aliasInfo - Alias Information.
 * @param value - Expression value.
 * @param hostElement add value to this element as host (e.g. add for elements Annotation and PropertyValue)
 * @returns Internal representation of the expression.
 */
export declare function convertExpressionToInternal(aliasInfo: AliasInformation, value: Expression, hostElement?: Element): Element | undefined;
/**
 *
 * @param aliasInfo - Alias Information.
 * @param apply - Apply expression.
 * @returns Internal representation of apply.
 */
export declare function convertApplyToInternal(aliasInfo: AliasInformation, apply: Apply): Element;
/**
 *
 * @param type - Type of primitive value.
 * @param value - Primitive value.
 * @param aliasInfo - Alias Information.
 * @returns Internal representation of primitive value
 */
export declare function convertPrimitiveValueToInternal(type: string, value: string | number | boolean | undefined, aliasInfo: AliasInformation): string;
//# sourceMappingURL=to-internal.d.ts.map