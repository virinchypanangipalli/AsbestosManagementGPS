"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExpression = exports.findAnnotationByReference = exports.findAnnotation = exports.getAvtNodeFromPointer = exports.isRecord = exports.isCollection = exports.isAnnotationList = exports.isAnnotation = exports.resolvePath = exports.convertPointerInAnnotationToInternal = exports.convertTargetAnnotationsToInternal = exports.convertRecordToInternal = exports.convertPropertyValueToInternal = exports.convertPrimitiveValueToInternal = exports.convertExpressionToInternal = exports.convertCollectionToInternal = exports.convertCollectionElement = exports.convertApplyToInternal = exports.convertAnnotationToInternal = exports.convertMetadataToAvtSchema = exports.convertAnnotationFile = void 0;
var annotations_1 = require("./annotations");
Object.defineProperty(exports, "convertAnnotationFile", { enumerable: true, get: function () { return annotations_1.convertAnnotationFile; } });
var metadata_1 = require("./metadata");
Object.defineProperty(exports, "convertMetadataToAvtSchema", { enumerable: true, get: function () { return metadata_1.convertMetadataToAvtSchema; } });
var to_internal_1 = require("./to-internal");
Object.defineProperty(exports, "convertAnnotationToInternal", { enumerable: true, get: function () { return to_internal_1.convertAnnotationToInternal; } });
Object.defineProperty(exports, "convertApplyToInternal", { enumerable: true, get: function () { return to_internal_1.convertApplyToInternal; } });
Object.defineProperty(exports, "convertCollectionElement", { enumerable: true, get: function () { return to_internal_1.convertCollectionElement; } });
Object.defineProperty(exports, "convertCollectionToInternal", { enumerable: true, get: function () { return to_internal_1.convertCollectionToInternal; } });
Object.defineProperty(exports, "convertExpressionToInternal", { enumerable: true, get: function () { return to_internal_1.convertExpressionToInternal; } });
Object.defineProperty(exports, "convertPrimitiveValueToInternal", { enumerable: true, get: function () { return to_internal_1.convertPrimitiveValueToInternal; } });
Object.defineProperty(exports, "convertPropertyValueToInternal", { enumerable: true, get: function () { return to_internal_1.convertPropertyValueToInternal; } });
Object.defineProperty(exports, "convertRecordToInternal", { enumerable: true, get: function () { return to_internal_1.convertRecordToInternal; } });
Object.defineProperty(exports, "convertTargetAnnotationsToInternal", { enumerable: true, get: function () { return to_internal_1.convertTargetAnnotationsToInternal; } });
var pointer_1 = require("./pointer");
Object.defineProperty(exports, "convertPointerInAnnotationToInternal", { enumerable: true, get: function () { return pointer_1.convertPointerInAnnotationToInternal; } });
var utils_1 = require("./utils");
Object.defineProperty(exports, "resolvePath", { enumerable: true, get: function () { return utils_1.resolvePath; } });
Object.defineProperty(exports, "isAnnotation", { enumerable: true, get: function () { return utils_1.isAnnotation; } });
Object.defineProperty(exports, "isAnnotationList", { enumerable: true, get: function () { return utils_1.isAnnotationList; } });
Object.defineProperty(exports, "isCollection", { enumerable: true, get: function () { return utils_1.isCollection; } });
Object.defineProperty(exports, "isRecord", { enumerable: true, get: function () { return utils_1.isRecord; } });
var find_1 = require("./find");
Object.defineProperty(exports, "getAvtNodeFromPointer", { enumerable: true, get: function () { return find_1.getAvtNodeFromPointer; } });
Object.defineProperty(exports, "findAnnotation", { enumerable: true, get: function () { return find_1.findAnnotation; } });
Object.defineProperty(exports, "findAnnotationByReference", { enumerable: true, get: function () { return find_1.findAnnotationByReference; } });
var expressions_1 = require("./expressions");
Object.defineProperty(exports, "isExpression", { enumerable: true, get: function () { return expressions_1.isExpression; } });
//# sourceMappingURL=index.js.map