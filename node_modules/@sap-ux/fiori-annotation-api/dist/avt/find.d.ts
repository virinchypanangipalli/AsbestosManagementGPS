import type { RawAnnotation, AnnotationList } from '@sap-ux/vocabularies-types';
import type { AliasInformation, AnnotationFile, Element, Target } from '@sap-ux/odata-annotation-core-types';
import type { AnnotationReference } from '../types';
import type { AVTNode } from './types';
/**
 * Finds a node matching to the pointer from root.
 *
 * @param root - Root node.
 * @param pointer - Pointer to a node.
 * @returns Node matching pointer.
 */
export declare function getAvtNodeFromPointer(root: RawAnnotation, pointer: string): AVTNode | undefined;
/**
 *  Fins first annotation matching the reference.
 *
 * @param annotationLists - Annotation lists.
 * @param reference - Annotation reference.
 * @returns Matching annotation.
 */
export declare function findAnnotation(annotationLists: AnnotationList[], reference: AnnotationReference): RawAnnotation | undefined;
export interface SearchResult {
    element: Element;
    target: Target;
    targetPointer: string;
    internalPointer: string;
}
/**
 *
 * @param aliasInfo - Alias information.
 * @param file - Internal representation.
 * @param mergeMap - Annotation merge map.
 * @param reference - Annotation reference.
 * @param pointer - Pointer to a node.
 * @param mergeAnnotations - Flag indicating if annotations were merged.
 * @param valueType - Current value type.
 * @returns Annotation search result.
 */
export declare function findAnnotationByReference(aliasInfo: AliasInformation, file: AnnotationFile, mergeMap: Record<string, string>, reference: AnnotationReference, pointer: string, mergeAnnotations: boolean, valueType?: string): SearchResult;
//# sourceMappingURL=find.d.ts.map