import type { RawMetadata } from '@sap-ux/vocabularies-types';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
import type { MetadataService } from '@sap-ux/odata-entity-model';
import type { AnnotationFileChange, Change, CompiledService } from './types';
export type SchemaProvider = () => RawMetadata;
/**
 * Converts changes to the internal change format.
 */
export declare class ChangeConverter {
    private serviceName;
    private vocabularyAPI;
    private metadataService;
    private splitAnnotationSupport;
    private aliasInfoCache;
    private newTargetChanges;
    private annotationFileChanges;
    /**
     *
     * @param serviceName Name of the service.
     * @param vocabularyAPI Vocabulary API instance.
     * @param metadataService Metadata service.
     * @param splitAnnotationSupport Flag indicating if partial annotation definitions are supported.
     */
    constructor(serviceName: string, vocabularyAPI: VocabularyService, metadataService: MetadataService, splitAnnotationSupport: boolean);
    /**
     * Converts changes to the internal change format.
     *
     * @param compiledService Service in internal format.
     * @param fileMergeMaps Maps containing references of merged split annotations.
     * @param schemaProvider Function which returns current service RawMetadata.
     * @param changes AVT changes to be converted.
     * @returns Annotation file changes.
     */
    convert(compiledService: CompiledService, fileMergeMaps: Record<string, Record<string, string>>, schemaProvider: SchemaProvider, changes: Change[]): AnnotationFileChange[];
    private insertAnnotation;
    private insertEmbeddedAnnotation;
    private convertInsert;
    private convertInsertExpression;
    private convertInsertPrimitive;
    private convertDelete;
    private convertUpdate;
    private convertUpdateAttribute;
    private getPrimitiveValueType;
    private getAttributeValue;
    private getExpressionValue;
    private convertUpdateExpression;
    private convertUpdateExpressionForAttrributeType;
    private convertUpdatePrimitiveValue;
    private convertMove;
    private addTargetChanges;
    private getValueType;
    private getValueTypeFromSchema;
    private isExpression;
    private getAliasInformation;
    private reset;
}
//# sourceMappingURL=change-converter.d.ts.map