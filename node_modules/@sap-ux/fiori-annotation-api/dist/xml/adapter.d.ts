import type { Target, WorkspaceEdit } from '@sap-ux/odata-annotation-core-types';
import type { Project } from '@sap-ux/project-access';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
import { MetadataService } from '@sap-ux/odata-entity-model';
import { type LocalEDMXService, type CompiledService, type TextFile, type AnnotationServiceAdapter, type AnnotationFileChange } from '../types';
/**
 *
 */
export declare class XMLAnnotationServiceAdapter implements AnnotationServiceAdapter {
    private service;
    private vocabularyService;
    private project;
    private appName;
    metadataService: MetadataService;
    splitAnnotationSupport: boolean;
    fileCache: Map<string, string>;
    private documents;
    private metadata;
    private setFileCache;
    private _compiledService;
    /**
     *
     * @returns Compiled XML service.
     */
    get compiledService(): CompiledService;
    private set compiledService(value);
    /**
     *
     * @param service - Service structure.
     * @param vocabularyService - Vocabulary API.
     * @param project - Project structure.
     * @param appName - Name of the application.
     */
    constructor(service: LocalEDMXService, vocabularyService: VocabularyService, project: Project, appName: string);
    /**
     * Refreshes internal data structures from the provided project files.
     *
     * @param fileCache - File uri mapped to file content.
     */
    sync(fileCache: Map<string, string>): void;
    /**
     * Returns all relevant service files.
     *
     * @returns All relevant service files.
     */
    getAllFiles(): TextFile[];
    /**
     * Creates empty annotation file content for the given service.
     *
     * @param serviceName - Name of the service.
     * @param uri - URI for the new annotation file.
     * @returns New annotation file content.
     */
    getInitialFileContent(serviceName: string, uri: string): string;
    /**
     * Converts changes to workspace edits.
     *
     * @param changes - Internal changes.
     * @returns Workspace edits.
     */
    getWorkspaceEdit(changes: AnnotationFileChange[]): Promise<WorkspaceEdit>;
    /**
     * No checking is done for XML files.
     *
     * @param fileCache - Updated file content.
     * @returns Nothing.
     */
    validateChanges(fileCache: Map<string, string>): void;
    /**
     * Converts annotation object to a string.
     *
     * @param target - Content of an 'Annotations' element.
     * @returns XML representation of the annotations.
     */
    serializeTarget(target: Target): string;
    private getUniqueNamespace;
    private _getCompiledService;
    private processChange;
    private getTargetChildReferences;
    private markElementDeletion;
    private markElementInsertion;
    private postprocessEdits;
    private updateReferences;
    private removeReferences;
    private addReferences;
}
//# sourceMappingURL=adapter.d.ts.map