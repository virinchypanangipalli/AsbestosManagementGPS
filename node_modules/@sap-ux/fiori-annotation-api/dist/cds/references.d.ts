import type { AliasInformation, Element, PathValue, Reference, Target as AnnotationFileTarget } from '@sap-ux/odata-annotation-core-types';
import type { MetadataService } from '@sap-ux/odata-entity-model';
import type { Document } from './document';
import type { ProjectInfo } from '../types';
/**
 *
 * @param projectRoot - Absolute path to the projects root.
 * @param references - Reference objects.
 * @param relativePath - Relative file path to be checked.
 * @param name - Name of the imported object.
 * @returns If the given reference is available in the document.
 */
export declare const isAvailable: (projectRoot: string, references: Reference[], relativePath?: string, name?: string) => boolean;
/**
 * Converts path to namespace qualified path.
 *
 * @param path - Input path value.
 * @param aliasInfo - Documents alias information.
 * @returns Namespace qualified path.
 */
export declare function resolvePath(path: PathValue, aliasInfo: AliasInformation): PathValue;
/**
 * Get all missing references for target and its annotations.
 *
 * @param documents - URI to Document map.
 * @param fileUri - Identification of current file (relative to project root).
 * @param targetName - Annotation target name.
 * @param targetOrElement - Internal representation of the target or subtree element.
 * @param aliasInfo - Alias information for the document.
 * @param metadataService - Metadata service.
 * @param projectInfo - Data about applications in the project.
 * @returns A set of missing references in the document.
 */
export declare function getMissingRefs(documents: Map<string, Document>, fileUri: string, targetName: string, targetOrElement: AnnotationFileTarget | Element, aliasInfo: AliasInformation, metadataService: MetadataService, projectInfo: ProjectInfo): Set<string>;
//# sourceMappingURL=references.d.ts.map