import type { Element, Target as AnnotationFileTarget } from '@sap-ux/odata-annotation-core';
import type { JsonPointer } from '../types';
export declare const INSERT_TARGET_CHANGE_TYPE = "insert-target";
export interface InsertTarget {
    type: typeof INSERT_TARGET_CHANGE_TYPE;
    /**
     * This must resolve to an element.
     */
    pointer: JsonPointer;
    target: AnnotationFileTarget;
    /**
     * Before which child element the new element should be inserted. If omitted will be added at the end.
     */
    index?: number;
}
/**
 *
 * @param pointer - Pointer to an element.
 * @param target - Internal representation of the target.
 * @param index - Before which child element the new element should be inserted. If omitted will be added at the end.
 * @returns Insert target change.
 */
export declare function createInsertTargetChange(pointer: JsonPointer, target: AnnotationFileTarget, index?: number): InsertTarget;
export type ElementInserts = InsertAnnotation | InsertEmbeddedAnnotation | InsertRecord | InsertRecordProperty | InsertPrimitiveValue;
export type Inserts = ElementInserts | InsertCollection;
export declare const INSERT_RECORD_CHANGE_TYPE = "insert-record";
export declare const createInsertRecordChange: (pointer: JsonPointer, element: Element, index?: number) => InsertRecord;
export interface InsertRecord {
    type: typeof INSERT_RECORD_CHANGE_TYPE;
    /**
     * This must resolve to value with record.
     */
    pointer: JsonPointer;
    element: Element;
    /**
     * Before which child element the new element should be inserted. If omitted will be added at the end.
     */
    index?: number;
}
export declare const INSERT_COLLECTION_CHANGE_TYPE = "insert-collection";
export declare const createInsertCollectionChange: (pointer: JsonPointer, element: Element, index?: number) => never;
export interface InsertCollection {
    type: typeof INSERT_COLLECTION_CHANGE_TYPE;
    /**
     * This must resolve to annotation or property.
     */
    pointer: JsonPointer;
    element: Element;
}
export declare const INSERT_ANNOTATION_CHANGE_TYPE = "insert-annotation";
export declare const createInsertAnnotationChange: (pointer: JsonPointer, element: Element, index?: number) => InsertAnnotation;
export interface InsertAnnotation {
    type: typeof INSERT_ANNOTATION_CHANGE_TYPE;
    /**
     * This must resolve target or annotation value.
     */
    pointer: JsonPointer;
    element: Element;
    /**
     * Before which child element the new element should be inserted. If omitted will be added at the end.
     */
    index?: number;
}
export declare const INSERT_EMBEDDED_ANNOTATION_CHANGE_TYPE = "insert-embedded-annotation";
export declare const createInsertEmbeddedAnnotationChange: (pointer: JsonPointer, element: Element, index?: number) => InsertEmbeddedAnnotation;
export interface InsertEmbeddedAnnotation {
    type: typeof INSERT_EMBEDDED_ANNOTATION_CHANGE_TYPE;
    /**
     * This must resolve to container annotation.
     */
    pointer: JsonPointer;
    element: Element;
    /**
     * Before which existing embedded annotation element the new element should be inserted. If omitted will be added at the end.
     */
    index?: number;
}
export declare const INSERT_RECORD_PROPERTY_CHANGE_TYPE = "insert-record-property";
export declare const createInsertRecordPropertyChange: (pointer: JsonPointer, element: Element, index?: number) => InsertRecordProperty;
export interface InsertRecordProperty {
    type: typeof INSERT_RECORD_PROPERTY_CHANGE_TYPE;
    /**
     * This must resolve to a record.
     */
    pointer: JsonPointer;
    element: Element;
    /**
     * Before which child element the new element should be inserted. If omitted will be added at the end.
     */
    index?: number;
}
export declare const INSERT_PRIMITIVE_VALUE_TYPE = "insert-primitive-value";
export declare const createInsertPrimitiveValueChange: (pointer: JsonPointer, element: Element, index?: number) => InsertPrimitiveValue;
export interface InsertPrimitiveValue {
    type: typeof INSERT_PRIMITIVE_VALUE_TYPE;
    /**
     * This must resolve to value with collection.
     */
    pointer: JsonPointer;
    element: Element;
    /**
     * Before which child element the new element should be inserted. If omitted will be added at the end Only applicable for collection.
     */
    index?: number;
}
export declare const INSERT_QUALIFIER_CHANGE_TYPE = "insert-qualifier";
export interface InsertQualifier {
    type: typeof INSERT_QUALIFIER_CHANGE_TYPE;
    /**
     * This must resolve to an annotation.
     */
    pointer: JsonPointer;
    value: string;
}
/**
 *
 * @param pointer - Pointer to an annotation.
 * @param value - Qualifier.
 * @returns Insert qualifier change.
 */
export declare function createInsertQualifierChange(pointer: JsonPointer, value: string): InsertQualifier;
export declare const INSERT_REFERENCE_CHANGE_TYPE = "insert-reference";
export interface InsertReference {
    type: typeof INSERT_REFERENCE_CHANGE_TYPE;
    /**
     * This must resolve to a value.
     */
    pointer: JsonPointer;
    references: string[];
}
/**
 *
 * @param pointer - Pointer to a document.
 * @param references - File references that needs to be added.
 * @returns Insert reference change.
 */
export declare function createInsertReferenceChange(pointer: JsonPointer, references: string[]): InsertReference;
export type Deletes = DeleteTarget | DeleteRecord | DeleteRecordProperty | DeleteAnnotationGroup | DeleteAnnotationGroupItems | DeleteAnnotation | DeleteEmbeddedAnnotation | DeletePrimitiveValue | DeleteQualifier;
export declare const DELETE_TARGET_CHANGE_TYPE = "delete-target";
export declare const createDeleteTargetChange: (pointer: JsonPointer) => DeleteTarget;
export interface DeleteTarget {
    type: typeof DELETE_TARGET_CHANGE_TYPE;
    /**
     * This must resolve to a target.
     */
    pointer: JsonPointer;
}
export declare const DELETE_RECORD_CHANGE_TYPE = "delete-record";
export declare const createDeleteRecordChange: (pointer: JsonPointer) => DeleteRecord;
export interface DeleteRecord {
    type: typeof DELETE_RECORD_CHANGE_TYPE;
    /**
     * This must resolve to a record.
     */
    pointer: JsonPointer;
}
export declare const DELETE_RECORD_PROPERTY_CHANGE_TYPE = "delete-record-property";
export declare const createDeleteRecordPropertyChange: (pointer: JsonPointer) => DeleteRecordProperty;
export interface DeleteRecordProperty {
    type: typeof DELETE_RECORD_PROPERTY_CHANGE_TYPE;
    /**
     * This must resolve to a record property.
     */
    pointer: JsonPointer;
}
export declare const DELETE_ANNOTATION_GROUP_CHANGE_TYPE = "delete-annotation-group";
export interface DeleteAnnotationGroup {
    type: typeof DELETE_ANNOTATION_GROUP_CHANGE_TYPE;
    /**
     * This must resolve to a annotation group.
     */
    pointer: JsonPointer;
}
export declare const DELETE_ANNOTATION_GROUP_ITEMS_CHANGE_TYPE = "delete-annotation-group-items";
export interface DeleteAnnotationGroupItems {
    type: typeof DELETE_ANNOTATION_GROUP_ITEMS_CHANGE_TYPE;
    /**
     * This must resolve to a annotation group items.
     */
    pointer: JsonPointer;
}
/**
 *
 * @param pointer - pointer to an annotation group
 * @returns Delete annotation group change.
 */
export declare function createDeleteAnnotationGroupChange(pointer: JsonPointer): DeleteAnnotationGroup;
/**
 *
 * @param pointer - pointer to an annotation group
 * @returns Delete annotation group change.
 */
export declare function createDeleteAnnotationGroupItemsChange(pointer: JsonPointer): DeleteAnnotationGroupItems;
export declare const DELETE_ANNOTATION_CHANGE_TYPE = "delete-annotation";
export interface DeleteAnnotation {
    type: typeof DELETE_ANNOTATION_CHANGE_TYPE;
    /**
     * This must resolve to a annotation.
     */
    pointer: JsonPointer;
    target?: string;
}
/**
 *
 * @param pointer - Pointer to an annotation.
 * @param target - Target name.
 * @returns Delete annotation change.
 */
export declare function createDeleteAnnotationChange(pointer: JsonPointer, target?: string): DeleteAnnotation;
export declare const DELETE_EMBEDDED_ANNOTATION_CHANGE_TYPE = "delete-embedded-annotation";
export declare const createDeleteEmbeddedChange: (pointer: JsonPointer) => DeleteEmbeddedAnnotation;
export interface DeleteEmbeddedAnnotation {
    type: typeof DELETE_EMBEDDED_ANNOTATION_CHANGE_TYPE;
    /**
     * This must resolve to an embedded annotation.
     */
    pointer: JsonPointer;
}
export declare const DELETE_PRIMITIVE_VALUE_CHANGE_TYPE = "delete-primitive-value";
export declare const createDeletePrimitiveValueChange: (pointer: JsonPointer) => DeletePrimitiveValue;
export interface DeletePrimitiveValue {
    type: typeof DELETE_PRIMITIVE_VALUE_CHANGE_TYPE;
    /**
     * This must resolve to a value.
     */
    pointer: JsonPointer;
}
export declare const DELETE_QUALIFIER_CHANGE_TYPE = "delete-qualifier";
export declare const createDeleteQualifierChange: (pointer: JsonPointer) => DeleteQualifier;
export interface DeleteQualifier {
    type: typeof DELETE_QUALIFIER_CHANGE_TYPE;
    /**
     * This must resolve to a qualifier.
     */
    pointer: JsonPointer;
}
export declare const REPLACE_NODE_CHANGE_TYPE = "replace-node";
export interface ReplaceNode {
    type: typeof REPLACE_NODE_CHANGE_TYPE;
    pointer: JsonPointer;
    newElement: Element;
}
/**
 *
 * @param pointer - Pointer to a node.
 * @param element - Replacement node in internal representation.
 * @returns Replace node change.
 */
export declare function createReplaceNodeChange(pointer: JsonPointer, element: Element): ReplaceNode;
export declare const REPLACE_RECORD_PROPERTY_CHANGE_TYPE = "replace-record-property";
export interface ReplaceRecordProperty {
    type: typeof REPLACE_RECORD_PROPERTY_CHANGE_TYPE;
    /**
     * This must resolve to record property.
     */
    pointer: JsonPointer;
    newProperty: Element;
}
/**
 *
 * @param pointer - Pointer to a record property.
 * @param element - New Record property in internal representation.
 * @returns Replace record property change.
 */
export declare function createReplaceRecordPropertyChange(pointer: JsonPointer, element: Element): ReplaceRecordProperty;
export declare const REPLACE_TEXT_VALUE_CHANGE_TYPE = "replace-text-value";
export interface ReplaceTextValue {
    type: typeof REPLACE_TEXT_VALUE_CHANGE_TYPE;
    /**
     * This must resolve to a node that matches primitive value type.
     */
    pointer: JsonPointer;
    newValue: string;
}
/**
 *
 * @param pointer - Pointer to a primitive value.
 * @param newValue - New text value.
 * @returns Replace text value change.
 */
export declare function createReplaceTextValueChange(pointer: JsonPointer, newValue: string): ReplaceTextValue;
export declare const UPDATE_PRIMITIVE_VALUE_CHANGE_TYPE = "update-primitive-value";
export interface UpdatePrimitiveValue {
    type: typeof UPDATE_PRIMITIVE_VALUE_CHANGE_TYPE;
    /**
     * This must resolve to a primitive value node.
     */
    pointer: JsonPointer;
    newValue: string;
}
/**
 *
 * @param pointer - Pointer to a primitive value.
 * @param newValue - New value.
 * @returns Replace primitive value change.
 */
export declare function createUpdatePrimitiveValueChange(pointer: JsonPointer, newValue: string): UpdatePrimitiveValue;
export declare const SET_FLAGS_CHANGE_TYPE = "set-flags";
export interface SetFlags {
    type: typeof SET_FLAGS_CHANGE_TYPE;
    /**
     * This must resolve to a collection in which the enum flags are set.
     */
    pointer: JsonPointer;
    /**
     * A list of enum member names separated by spaces. Can also contain type information in OData format e.g Communication.PhoneType/work.
     */
    value: string;
}
/**
 *
 * @param pointer - Pointer to a enum flags node (collection).
 * @param value - A list of enum member names separated by spaces. Can also contain type information in OData format e.g Communication.PhoneType/work.
 * @returns Set flags change.
 */
export declare function createSetFlagsChange(pointer: JsonPointer, value: string): SetFlags;
export declare const MOVE_COLLECTION_VALUE_CHANGE_TYPE = "move-collection-value";
export interface MoveCollectionValue {
    type: typeof MOVE_COLLECTION_VALUE_CHANGE_TYPE;
    /**
     * move before index.
     */
    index?: number;
    /**
     * Array of  eg: collection.
     */
    fromPointers: JsonPointer[];
    /**
     * This must resolve to container eg: collection.
     */
    pointer: JsonPointer;
}
/**
 *
 * @param pointer - Pointer to a container where the nodes will be moved.
 * @param fromPointers - Pointers to nodes which needs to be moved.
 * @param index - Before which child element the new element should be inserted. If omitted will be added at the end.
 * @returns Move collection value change.
 */
export declare function createMoveCollectionChange(pointer: JsonPointer, fromPointers: JsonPointer[], index?: number): MoveCollectionValue;
export declare const CONVERT_TO_COMPOUND_ANNOTATION_CHANGE_TYPE = "convert-to-compound-annotation";
export interface ConvertToCompoundAnnotation {
    type: typeof CONVERT_TO_COMPOUND_ANNOTATION_CHANGE_TYPE;
    /**
     * This must resolve to assignment on target.
     */
    pointer: JsonPointer;
    /**
     * If indentation should also be applied to the converted annotations
     */
    applyContentIndentation: boolean;
}
/**
 *
 * @param pointer - Pointer to an assignment.
 * @param applyContentIndentation - Flag indicating if content should be also indented.
 * @returns Convert to compound annotation change.
 */
export declare function createConvertToCompoundAnnotationChange(pointer: JsonPointer, applyContentIndentation: boolean): ConvertToCompoundAnnotation;
export type CDSDocumentChange = InsertTarget | Inserts | InsertQualifier | InsertPrimitiveValue | InsertReference | Deletes | ReplaceNode | ReplaceRecordProperty | ReplaceTextValue | UpdatePrimitiveValue | SetFlags | MoveCollectionValue | ConvertToCompoundAnnotation;
//# sourceMappingURL=change.d.ts.map