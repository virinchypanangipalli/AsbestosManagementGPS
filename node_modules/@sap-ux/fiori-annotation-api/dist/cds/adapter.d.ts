import type { WorkspaceEdit, Target, CompilerMessage } from '@sap-ux/odata-annotation-core-types';
import { MetadataService } from '@sap-ux/odata-entity-model';
import type { Project } from '@sap-ux/project-access';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
import { type CompiledService, type TextFile, type AnnotationServiceAdapter, type AnnotationFileChange, type CDSService, type InsertTarget, type DeleteElement, type InsertElement, type DeleteAttribute, type UpdateAttributeValue, type ReplaceAttribute, type ReplaceElement, type ReplaceText, type ReplaceElementContent, type InsertAttribute, type MoveElements, INSERT_TARGET, DELETE_ELEMENT, INSERT_ELEMENT, INSERT_ATTRIBUTE, DELETE_ATTRIBUTE, UPDATE_ATTRIBUTE_VALUE } from '../types';
import type { Document } from './document';
import { CDSWriter } from './writer';
import { DELETE_REFERENCE, MOVE_ELEMENT, REPLACE_ATTRIBUTE, REPLACE_ELEMENT, REPLACE_ELEMENT_CONTENT, REPLACE_TEXT, UPDATE_ELEMENT_NAME } from '../types/internal-change';
type ChangeHandlerFunction<T extends AnnotationFileChange> = (writer: CDSWriter, document: Document, change: T) => void;
type ChangeHandler = {
    [Change in AnnotationFileChange as Change['type']]: ChangeHandlerFunction<Change>;
};
/**
 *
 */
export declare class CDSAnnotationServiceAdapter implements AnnotationServiceAdapter, ChangeHandler {
    private service;
    private project;
    private vocabularyService;
    private appName;
    metadataService: MetadataService;
    splitAnnotationSupport: boolean;
    private fileCache;
    private documents;
    private metadata;
    private missingReferences;
    /**
     *
     * @param service - CDS service structure.
     * @param project - Project structure.
     * @param vocabularyService - Vocabulary API.
     * @param appName - Name of the application.
     */
    constructor(service: CDSService, project: Project, vocabularyService: VocabularyService, appName: string);
    private facade;
    private setFileCache;
    private setFacade;
    private _compiledService;
    /**
     * @returns Compiled CDS service.
     */
    get compiledService(): CompiledService;
    private set compiledService(value);
    private _fileSequence;
    /**
     * Refreshes internal data structures from the provided project files.
     *
     * @param fileCache - File uri mapped to file content.
     * @returns Sync errors
     */
    sync(fileCache: Map<string, string>): Promise<Map<string, CompilerMessage>>;
    /**
     * Returns all relevant service files.
     *
     * @param includeGhostFiles - Flag indicating if ghost files should be included.
     * @returns All relevant service files.
     */
    getAllFiles(includeGhostFiles: boolean): TextFile[];
    /**
     * Creates empty annotation file content for the given service.
     *
     * @param serviceName - Name of the service.
     * @param uri - URI for the new annotation file.
     * @returns New annotation file content.
     */
    getInitialFileContent(serviceName: string, uri: string): string;
    /**
     * Converts changes to workspace edits.
     *
     * @param changes - Internal changes.
     * @returns Workspace edits.
     */
    getWorkspaceEdit(changes: AnnotationFileChange[]): Promise<WorkspaceEdit>;
    /**
     * Checks if there are no compile errors in the files after update.
     *
     * @param fileCache - Updated file content.
     * @returns Errors.
     */
    validateChanges(fileCache: Map<string, string>): Promise<Map<string, CompilerMessage>>;
    /**
     * Converts annotation object to a string.
     *
     * @param target - Content of an 'Annotations' element.
     * @returns CDS representation of the annotations.
     */
    serializeTarget(target: Target): string;
    private _getCompiledService;
    private clearState;
    private invalidateCaches;
    private updateFileSequence;
    private processMissingReferences;
    private addMissingReferences;
    [INSERT_TARGET]: (writer: CDSWriter, document: Document, change: InsertTarget) => void;
    [DELETE_ELEMENT]: (writer: CDSWriter, document: Document, change: DeleteElement) => void;
    [INSERT_ELEMENT]: (writer: CDSWriter, document: Document, change: InsertElement) => void;
    private insertInFlattenedStructure;
    private insertAnnotation;
    private insertRecord;
    [INSERT_ATTRIBUTE]: (writer: CDSWriter, document: Document, change: InsertAttribute) => void;
    [DELETE_ATTRIBUTE]: (writer: CDSWriter, document: Document, change: DeleteAttribute) => void;
    [UPDATE_ATTRIBUTE_VALUE]: (writer: CDSWriter, document: Document, change: UpdateAttributeValue) => void;
    [REPLACE_ATTRIBUTE]: (writer: CDSWriter, document: Document, change: ReplaceAttribute) => void;
    [REPLACE_ELEMENT]: (writer: CDSWriter, document: Document, change: ReplaceElement) => void;
    [REPLACE_TEXT]: (writer: CDSWriter, document: Document, change: ReplaceText) => void;
    [REPLACE_ELEMENT_CONTENT]: (writer: CDSWriter, document: Document, change: ReplaceElementContent) => void;
    [MOVE_ELEMENT]: (writer: CDSWriter, document: Document, change: MoveElements) => void;
    [UPDATE_ELEMENT_NAME]: () => void;
    [DELETE_REFERENCE]: () => void;
}
export {};
//# sourceMappingURL=adapter.d.ts.map