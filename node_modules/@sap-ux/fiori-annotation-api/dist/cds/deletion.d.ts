import type { AnnotationFile } from '@sap-ux/odata-annotation-core-types';
import { TextEdit } from '@sap-ux/odata-annotation-core-types';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
import { PrintPattern } from '@sap-ux/cds-odata-annotation-converter';
import type { Annotation } from '@sap-ux/cds-annotation-parser';
import type { CompilerToken } from './cds-compiler-tokens';
interface IndexRange {
    start: number;
    end: number;
}
/**
 * Kind of what is currently already contained in deletion range
 * - used to expand range (e.g. with surrounding brackets) or merge ranges (if two are separated just by ',' or ';')
 */
export declare const enum DeletionRangeKind {
    UNDEFINED = "Undefined",
    TERM_NAME = "TermName",// term + value (without namespace), i.e. "Description: 'description'"
    TERM_FQ_NAME = "TermFqName",// term + value (with namespace), i.e. "Core.Description: 'description'"
    ANNOTATION = "Annotation",// annotation including @, i.e. "@Core.Description: 'description'"
    TARGET_ELEMENT = "TargetElement",// with target element name, i.e. "price @Core.Description: 'description'"
    TARGET_ELEMENTS_LIST = "TargetElementsList",// with target elements list, i.e. "{ price @Core.Description: 'description' }"
    TARGET_PARAMETER = "TargetParameter",// with target parameter name, i.e. "rating @Core.IsCriticalParameter: true"
    TARGET_BOUND_ACTION = "TargetBoundAction",// with bound target action name, i.e. "copy @Core.IsActionCritical: true"
    TARGET_ARTIFACT = "TargetArtifact",// with target artifact name, i.e. "annotate AdminService.Books with @Core.Description: 'description'"
    TARGET_FROM_WITH = "TargetFromWith"
}
export interface DeletionRange {
    kind: DeletionRangeKind;
    printPattern: PrintPattern;
    termRange: IndexRange;
    tokenRange: IndexRange;
    isExpanded: boolean;
    includeTarget?: boolean;
}
/**
 * Converts deletion ranges to text edits.
 *
 * @param deletionRanges - Deletion ranges.
 * @param vocabularyAliases - Vocabulary aliases.
 * @param tokens - All tokens in the document.
 * @param annotationFile - Internal representation root.
 * @param includeTarget - Flag indicating if the target should also be deleted.
 * @returns Expanded text edit.
 */
export declare function getTextEditsForDeletionRanges(deletionRanges: DeletionRange[], vocabularyAliases: Set<string>, tokens: CompilerToken[], annotationFile: AnnotationFile, includeTarget: boolean): TextEdit[];
/**
 * Creates deletion ranges for a node.
 *
 * @param vocabularyService - Vocabulary API.
 * @param vocabularyAliases - Vocabulary aliases.
 * @param termIndex - Term index in the target.
 * @param tokens - All tokens in the document.
 * @param annotation - Annotation to be deleted.
 * @param target - Target name.
 * @returns Deletion range for the node.
 */
export declare function getDeletionRangeForNode(vocabularyService: VocabularyService, vocabularyAliases: Set<string>, termIndex: number, tokens: CompilerToken[], annotation: Annotation, target: string): DeletionRange | undefined;
export {};
//# sourceMappingURL=deletion.d.ts.map