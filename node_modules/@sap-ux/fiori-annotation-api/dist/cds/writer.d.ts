import type { TextDocument } from 'vscode-languageserver-textdocument';
import type { AnnotationFile } from '@sap-ux/odata-annotation-core';
import { TextEdit } from '@sap-ux/odata-annotation-core';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
import { type CdsCompilerFacade } from '@sap/ux-cds-compiler-facade';
import type { Comment } from './comments';
import type { AstNode, CDSDocument } from './document';
import type { CDSDocumentChange, DeleteAnnotation, InsertAnnotation, DeleteEmbeddedAnnotation, DeleteRecordProperty, DeletePrimitiveValue, InsertEmbeddedAnnotation, InsertCollection, InsertRecord, InsertRecordProperty, InsertPrimitiveValue, SetFlags, InsertQualifier, ReplaceTextValue, ReplaceRecordProperty, MoveCollectionValue, DeleteQualifier, InsertReference, InsertTarget, ReplaceNode, UpdatePrimitiveValue, DeleteRecord, DeleteTarget, ConvertToCompoundAnnotation, DeleteAnnotationGroup } from './change';
import { INSERT_PRIMITIVE_VALUE_TYPE, MOVE_COLLECTION_VALUE_CHANGE_TYPE, DELETE_ANNOTATION_CHANGE_TYPE, INSERT_ANNOTATION_CHANGE_TYPE, INSERT_TARGET_CHANGE_TYPE, INSERT_RECORD_CHANGE_TYPE, INSERT_COLLECTION_CHANGE_TYPE, INSERT_EMBEDDED_ANNOTATION_CHANGE_TYPE, INSERT_RECORD_PROPERTY_CHANGE_TYPE, INSERT_QUALIFIER_CHANGE_TYPE, INSERT_REFERENCE_CHANGE_TYPE, DELETE_EMBEDDED_ANNOTATION_CHANGE_TYPE, DELETE_PRIMITIVE_VALUE_CHANGE_TYPE, DELETE_QUALIFIER_CHANGE_TYPE, DELETE_RECORD_CHANGE_TYPE, DELETE_RECORD_PROPERTY_CHANGE_TYPE, REPLACE_NODE_CHANGE_TYPE, REPLACE_RECORD_PROPERTY_CHANGE_TYPE, SET_FLAGS_CHANGE_TYPE, UPDATE_PRIMITIVE_VALUE_CHANGE_TYPE, REPLACE_TEXT_VALUE_CHANGE_TYPE, DELETE_TARGET_CHANGE_TYPE, CONVERT_TO_COMPOUND_ANNOTATION_CHANGE_TYPE, DELETE_ANNOTATION_GROUP_CHANGE_TYPE, DELETE_ANNOTATION_GROUP_ITEMS_CHANGE_TYPE } from './change';
import type { CompilerToken } from './cds-compiler-tokens';
type ChangeHandlerFunction<T extends CDSDocumentChange> = (change: T, reversePath: AstNode[]) => void | Promise<void>;
type ChangeHandler = {
    [Change in CDSDocumentChange as Change['type']]: ChangeHandlerFunction<Change>;
};
/**
 *
 */
export declare class CDSWriter implements ChangeHandler {
    private facade;
    private vocabularyService;
    private document;
    private comments;
    private tokens;
    private textDocument;
    private projectRoot;
    /**
     * This should be removed once it is no longer needed by deletion logic
     *
     * @deprecated
     */
    private annotationFile;
    private readonly changes;
    private edits;
    private indentLevelCache;
    private vocabularyAliases;
    private deletionRangesMapForTarget;
    private uniqueInserts;
    private processedChanges;
    /**
     *
     * @param facade - CDS compiler facade instance.
     * @param vocabularyService - Vocabulary API.
     * @param document - CDS document AST root.
     * @param comments - All comments of the document.
     * @param tokens - All tokens in the document.
     * @param textDocument - TextDocument instance.
     * @param projectRoot - Absolute path to the project root.
     * @param annotationFile - Internal representation of the annotation file.
     */
    constructor(facade: CdsCompilerFacade, vocabularyService: VocabularyService, document: CDSDocument, comments: Comment[], tokens: CompilerToken[], textDocument: TextDocument, projectRoot: string, 
    /**
     * This should be removed once it is no longer needed by deletion logic
     *
     * @deprecated
     */
    annotationFile: AnnotationFile);
    /**
     * Adds change to the stack.
     *
     * @param change - New change.
     */
    addChange(change: CDSDocumentChange): void;
    /**
     * Creates text edits for the changes in the stack.
     *
     * @returns - Text edits.
     */
    getTextEdits(): Promise<TextEdit[]>;
    /**
     * Building text edits is a stateful process and needs to be cleared after each {@link CDSWriter.getTextEdits} call.
     *
     */
    private resetState;
    private getIndentLevel;
    private isFirstInsert;
    [INSERT_TARGET_CHANGE_TYPE]: (change: InsertTarget) => void;
    [INSERT_RECORD_CHANGE_TYPE]: (change: InsertRecord, reversePath: AstNode[]) => void;
    [INSERT_COLLECTION_CHANGE_TYPE]: (change: InsertCollection, reversePath: AstNode[]) => void;
    [INSERT_ANNOTATION_CHANGE_TYPE]: (change: InsertAnnotation, reversePath: AstNode[]) => void;
    [INSERT_EMBEDDED_ANNOTATION_CHANGE_TYPE]: (change: InsertEmbeddedAnnotation, reversePath: AstNode[]) => void;
    [INSERT_RECORD_PROPERTY_CHANGE_TYPE]: (change: InsertRecordProperty, reversePath: AstNode[]) => void;
    [INSERT_PRIMITIVE_VALUE_TYPE]: (change: InsertPrimitiveValue, reversePath: AstNode[]) => void;
    [INSERT_QUALIFIER_CHANGE_TYPE]: (change: InsertQualifier, reversePath: AstNode[]) => void;
    [INSERT_REFERENCE_CHANGE_TYPE]: (change: InsertReference) => Promise<void>;
    private deleteNode;
    [DELETE_TARGET_CHANGE_TYPE]: (_change: DeleteTarget, reversePath: AstNode[]) => void;
    [DELETE_RECORD_CHANGE_TYPE]: (change: DeleteRecord, reversePath: AstNode[]) => void;
    [DELETE_RECORD_PROPERTY_CHANGE_TYPE]: (change: DeleteRecordProperty, reversePath: AstNode[]) => void;
    [DELETE_ANNOTATION_GROUP_CHANGE_TYPE]: (change: DeleteAnnotationGroup, reversePath: AstNode[]) => void;
    [DELETE_ANNOTATION_GROUP_ITEMS_CHANGE_TYPE]: () => void;
    private getDeletionRange;
    [DELETE_ANNOTATION_CHANGE_TYPE]: (change: DeleteAnnotation, reversePath: AstNode[]) => void;
    [DELETE_EMBEDDED_ANNOTATION_CHANGE_TYPE]: (change: DeleteEmbeddedAnnotation, reversePath: AstNode[]) => void;
    [DELETE_PRIMITIVE_VALUE_CHANGE_TYPE]: (change: DeletePrimitiveValue, reversePath: AstNode[]) => void;
    [DELETE_QUALIFIER_CHANGE_TYPE]: (change: DeleteQualifier, reversePath: AstNode[]) => void;
    [REPLACE_NODE_CHANGE_TYPE]: (change: ReplaceNode, reversePath: AstNode[]) => void;
    [REPLACE_RECORD_PROPERTY_CHANGE_TYPE]: (change: ReplaceRecordProperty, reversePath: AstNode[]) => void;
    [REPLACE_TEXT_VALUE_CHANGE_TYPE]: (change: ReplaceTextValue, reversePath: AstNode[]) => void;
    [UPDATE_PRIMITIVE_VALUE_CHANGE_TYPE]: (change: UpdatePrimitiveValue, reversePath: AstNode[]) => void;
    [SET_FLAGS_CHANGE_TYPE]: (change: SetFlags, reversePath: AstNode[]) => void;
    [MOVE_COLLECTION_VALUE_CHANGE_TYPE]: (change: MoveCollectionValue, reversePath: AstNode[]) => void;
    [CONVERT_TO_COMPOUND_ANNOTATION_CHANGE_TYPE]: (change: ConvertToCompoundAnnotation, reversePath: AstNode[]) => void;
    private insertIntoNodeWithContent;
    private insertText;
    private convertInsertNodeToTextEdits;
    private findInsertPosition;
}
export {};
//# sourceMappingURL=writer.d.ts.map