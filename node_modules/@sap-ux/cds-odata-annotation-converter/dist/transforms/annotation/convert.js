"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertAnnotation = void 0;
const visitor_state_1 = require("./visitor-state");
const visitor_1 = require("./visitor");
const find_node_1 = require("./find-node");
/**
 * Converts CDS annotation AST nodes to the generic annotation format.
 *
 * @param assignment Annotation assignment node
 * @param options Term options e.g. position
 * @returns converted annotation which contain information of terms, diagnostics position.
 */
function convertAnnotation(assignment, options) {
    const state = new visitor_state_1.VisitorState(options.vocabularyService);
    if (options.position) {
        state.position = options.position;
    }
    const terms = [];
    if (assignment.type === 'annotation-group') {
        state.pushContext({
            groupName: assignment.name.value
        });
    }
    const nodes = assignment.type === 'annotation' ? [assignment] : assignment.items.items;
    for (const item of nodes) {
        const context = { ...state.context };
        const element = visitor_1.visitor.visit(state, item);
        state.pushContext(context);
        if (element) {
            terms.push(element);
        }
    }
    const result = {
        terms,
        diagnostics: state.diagnostics,
        pathSet: state.pathSet
    };
    const match = options.position ? (0, find_node_1.findNode)(assignment, terms, options.position) : undefined;
    if (match) {
        result.pointer = match.pointer;
        result.nodeRange = match.range;
    }
    return result;
}
exports.convertAnnotation = convertAnnotation;
//# sourceMappingURL=convert.js.map