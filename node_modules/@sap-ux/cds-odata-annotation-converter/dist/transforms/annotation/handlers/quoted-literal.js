"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.quotedLiteralHandler = void 0;
const cds_annotation_parser_1 = require("@sap-ux/cds-annotation-parser");
const odata_annotation_core_types_1 = require("@sap-ux/odata-annotation-core-types");
exports.quotedLiteralHandler = {
    type: cds_annotation_parser_1.QUOTED_LITERAL_TYPE,
    convert(state, node) {
        const element = (0, odata_annotation_core_types_1.createElementNode)({
            name: getElementNameForQuotedLiteral(node.kind),
            nameRange: (0, cds_annotation_parser_1.nodeRange)(node, false),
            range: (0, cds_annotation_parser_1.nodeRange)(node, true)
        });
        return element;
    }
};
/**
 *
 * @param kind quoted string.
 * @returns check case and return Edm (Time of Day, date, dateOffset or binary).
 */
function getElementNameForQuotedLiteral(kind) {
    switch (kind) {
        case 'time':
            return "TimeOfDay" /* Edm.TimeOfDay */;
        case 'date':
            return "Date" /* Edm.Date */;
        case 'timestamp':
            return "DateTimeOffset" /* Edm.DateTimeOffset */;
        case 'binary':
            return "Binary" /* Edm.Binary */;
        default:
            // Use 'assertNever' to handle exhaustiveness check
            return assertNever(kind);
    }
}
/**
 * Throws an error indicating that a value should never be reached.
 *
 * @param value - The value that should never be reached.
 */
function assertNever(value) {
    throw new Error(`Unexpected value: ${value}`);
}
//# sourceMappingURL=quoted-literal.js.map