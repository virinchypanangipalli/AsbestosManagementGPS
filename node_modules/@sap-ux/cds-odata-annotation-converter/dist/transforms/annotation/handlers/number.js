"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNumberType = exports.numberHandler = void 0;
const cds_annotation_parser_1 = require("@sap-ux/cds-annotation-parser");
const odata_annotation_core_types_1 = require("@sap-ux/odata-annotation-core-types");
exports.numberHandler = {
    type: cds_annotation_parser_1.NUMBER_LITERAL_TYPE,
    convert(state, node) {
        const elementName = getNumberType(state.context.valueType, node.value);
        return (0, odata_annotation_core_types_1.createElementNode)({
            name: elementName,
            range: (0, cds_annotation_parser_1.nodeRange)(node, true),
            contentRange: (0, cds_annotation_parser_1.nodeRange)(node, true),
            content: [(0, odata_annotation_core_types_1.createTextNode)(node.value.toString(), (0, cds_annotation_parser_1.nodeRange)(node, false))]
        });
    }
};
/**
 * Determines the corresponding Edm type for the given type name and value.
 *
 * @param typeName - The type name to be considered.
 * @param value - The value for which the Edm type is determined.
 * @returns The corresponding Edm type.
 */
function getNumberType(typeName, value) {
    if (typeName === 'Edm.Decimal') {
        return "Decimal" /* Edm.Decimal */;
    }
    if (typeName === 'Edm.Double' || typeName === 'Edm.Single') {
        return "Float" /* Edm.Float */;
    }
    if (typeName === 'Edm.Int64') {
        return "Int" /* Edm.Int */;
    }
    if (typeof value === 'number') {
        if (typeName === 'Edm.String') {
            return "String" /* Edm.String */;
        }
        if (Number.isInteger(value)) {
            return "Int" /* Edm.Int */;
        }
        // cds has no number literals which can only be represented as float value, see url://pages.github.tools.sap/cap/docs/cds/types
        return "Decimal" /* Edm.Decimal */;
    }
    return "String" /* Edm.String */;
}
exports.getNumberType = getNumberType;
//# sourceMappingURL=number.js.map