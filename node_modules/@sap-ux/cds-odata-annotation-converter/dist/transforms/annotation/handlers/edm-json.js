"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdmJsonVisitor = void 0;
const odata_annotation_core_1 = require("@sap-ux/odata-annotation-core");
const text_document_utils_1 = require("@sap-ux/text-document-utils");
const cds_annotation_parser_1 = require("@sap-ux/cds-annotation-parser");
const i18n_1 = require("../../../i18n");
const number_1 = require("./number");
const handler_1 = require("../handler");
/**
 *
 */
class EdmJsonVisitor {
    /**
     *
     * @param state - The visitor state.
     */
    constructor(state) {
        this.state = state;
        this.isElementPathKind = (elementName) => {
            return [
                "Path" /* Edm.Path */,
                "PropertyPath" /* Edm.PropertyPath */,
                "AnnotationPath" /* Edm.AnnotationPath */,
                "ModelElementPath" /* Edm.ModelElementPath */,
                "NavigationPropertyPath" /* Edm.NavigationPropertyPath */
            ].includes(elementName);
        };
        this[_a] = (record) => {
            const element = (0, odata_annotation_core_1.createElementNode)({
                name: '',
                range: (0, cds_annotation_parser_1.nodeRange)(record, true),
                contentRange: (0, cds_annotation_parser_1.nodeRange)(record, false)
            });
            for (let i = 0; i < record.properties.length; i++) {
                const property = record.properties[i];
                if (property.name.value.startsWith('$')) {
                    if (i === 0) {
                        this.convertElementName(property, element);
                    }
                    else if (cds_annotation_parser_1.STRING_LITERAL_TYPE === property.value?.type || cds_annotation_parser_1.EMPTY_VALUE_TYPE === property.value?.type) {
                        this.convertAttribute(property, element);
                    }
                    else if (property.value?.range) {
                        this.state.addDiagnostic({
                            range: property.value.range,
                            severity: text_document_utils_1.DiagnosticSeverity.Error,
                            message: i18n_1.i18n.t('The_attribute_value_must_be_a_string_literal')
                        });
                    }
                }
            }
            if (element.name === '') {
                // failed to determine element name -> we can't generate a correct element
                return undefined;
            }
            return element;
        };
        this[_b] = () => {
            return undefined;
        };
        this[_c] = () => {
            return undefined;
        };
        this[_d] = (node) => {
            const textNode = (0, odata_annotation_core_1.createTextNode)(node.value, (0, cds_annotation_parser_1.nodeRange)(node, false));
            return (0, odata_annotation_core_1.createElementNode)({
                name: "String" /* Edm.String */,
                range: (0, cds_annotation_parser_1.nodeRange)(node, true),
                contentRange: (0, cds_annotation_parser_1.nodeRange)(node, false),
                content: [textNode]
            });
        };
        this[_e] = (node) => {
            let text = '';
            if (node.value === true) {
                text = 'true';
            }
            else if (node.value === false) {
                text = 'false';
            }
            const element = (0, odata_annotation_core_1.createElementNode)({
                name: "Bool" /* Edm.Bool */,
                range: (0, cds_annotation_parser_1.nodeRange)(node, true),
                contentRange: (0, cds_annotation_parser_1.nodeRange)(node, false),
                content: [(0, odata_annotation_core_1.createTextNode)(text, (0, cds_annotation_parser_1.nodeRange)(node, false))]
            });
            return element;
        };
        this[_f] = (node) => {
            const result = number_1.numberHandler.convert(this.state, node);
            if (result === undefined || (0, handler_1.isSubtree)(result)) {
                return undefined;
            }
            return result;
        };
    }
    /**
     * Visits the given AnnotationNode and invokes the corresponding visitor function based on the node type.
     *
     * @param node - The AnnotationNode to be visited.
     * @returns Returns an Element or undefined based on the visitor function for the given node type.
     */
    visit(node) {
        const visitor = this[node.type];
        if (visitor) {
            return visitor(node);
        }
        else {
            return undefined;
        }
    }
    /**
     * Converts a RecordProperty representing an attribute into an Element and adds it to the provided Element.
     *
     * @param property - The RecordProperty representing the attribute.
     * @param element - The Element to which the attribute will be added.
     */
    convertAttribute(property, element) {
        if (property.value) {
            const name = property.name.value.substring(1);
            element.attributes[name] = (0, odata_annotation_core_1.createAttributeNode)(name, property.value?.type === cds_annotation_parser_1.STRING_LITERAL_TYPE ? property.value.value : '', (0, cds_annotation_parser_1.nodeRange)(property.name, false), property.value.range);
            if (property.value.type === cds_annotation_parser_1.STRING_LITERAL_TYPE && this.isElementPathKind(name)) {
                this.state.addPath(property.value.value);
            }
        }
    }
    /**
     * Converts an element name based on the provided RecordProperty and Element.
     *
     * @param property - The RecordProperty containing the element name.
     * @param element - The Element to be converted.
     */
    convertElementName(property, element) {
        element.name = property.name.value.substring(1);
        element.nameRange = property.name.range;
        if (property.value?.type === cds_annotation_parser_1.STRING_LITERAL_TYPE) {
            const textNode = (0, odata_annotation_core_1.createTextNode)(property.value.value, (0, cds_annotation_parser_1.nodeRange)(property.value, false));
            element.content = [textNode];
            if (this.isElementPathKind(element.name)) {
                this.state.addPath(property.value.value);
            }
        }
        else if (property.value?.type === cds_annotation_parser_1.COLLECTION_TYPE) {
            // Record is used as a container for a single element here
            this.convertCollection(property.value.items, element);
        }
        else if (property.value) {
            const child = this.visit(property.value);
            if (child) {
                element.content.push(child);
            }
        }
    }
    /**
     * Converts a collection of AnnotationValue items into Elements and adds them to the provided Element.
     *
     * @param items - The collection of AnnotationValue items to be converted.
     * @param element - The Element to which the converted items will be added.
     */
    convertCollection(items, element) {
        for (const item of items) {
            const child = this.visit(item);
            if (child) {
                element.content.push(child);
            }
        }
    }
}
exports.EdmJsonVisitor = EdmJsonVisitor;
_a = cds_annotation_parser_1.RECORD_TYPE, _b = cds_annotation_parser_1.COLLECTION_TYPE, _c = cds_annotation_parser_1.EMPTY_VALUE_TYPE, _d = cds_annotation_parser_1.STRING_LITERAL_TYPE, _e = cds_annotation_parser_1.BOOLEAN_TYPE, _f = cds_annotation_parser_1.NUMBER_LITERAL_TYPE;
//# sourceMappingURL=edm-json.js.map