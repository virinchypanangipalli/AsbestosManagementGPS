import type { Element } from '@sap-ux/odata-annotation-core';
import type { AnnotationNode, Record, StringLiteral, BooleanLiteral, NumberLiteral, AnnotationValue, RecordProperty } from '@sap-ux/cds-annotation-parser';
import { RECORD_TYPE, STRING_LITERAL_TYPE, COLLECTION_TYPE, EMPTY_VALUE_TYPE, BOOLEAN_TYPE, NUMBER_LITERAL_TYPE } from '@sap-ux/cds-annotation-parser';
import type { VisitorState } from '../visitor-state';
/**
 *
 */
export declare class EdmJsonVisitor {
    private state;
    isElementPathKind: (elementName: string) => boolean;
    /**
     *
     * @param state - The visitor state.
     */
    constructor(state: VisitorState);
    /**
     * Visits the given AnnotationNode and invokes the corresponding visitor function based on the node type.
     *
     * @param node - The AnnotationNode to be visited.
     * @returns Returns an Element or undefined based on the visitor function for the given node type.
     */
    visit(node: AnnotationNode): Element | undefined;
    [RECORD_TYPE]: (record: Record) => Element | undefined;
    /**
     * Converts a RecordProperty representing an attribute into an Element and adds it to the provided Element.
     *
     * @param property - The RecordProperty representing the attribute.
     * @param element - The Element to which the attribute will be added.
     */
    convertAttribute(property: RecordProperty, element: Element): void;
    /**
     * Converts an element name based on the provided RecordProperty and Element.
     *
     * @param property - The RecordProperty containing the element name.
     * @param element - The Element to be converted.
     */
    convertElementName(property: RecordProperty, element: Element): void;
    /**
     * Converts a collection of AnnotationValue items into Elements and adds them to the provided Element.
     *
     * @param items - The collection of AnnotationValue items to be converted.
     * @param element - The Element to which the converted items will be added.
     */
    convertCollection(items: AnnotationValue[], element: Element): void;
    [COLLECTION_TYPE]: () => Element | undefined;
    [EMPTY_VALUE_TYPE]: () => Element | undefined;
    [STRING_LITERAL_TYPE]: (node: StringLiteral) => Element | undefined;
    [BOOLEAN_TYPE]: (node: BooleanLiteral) => Element | undefined;
    [NUMBER_LITERAL_TYPE]: (node: NumberLiteral) => Element | undefined;
}
//# sourceMappingURL=edm-json.d.ts.map