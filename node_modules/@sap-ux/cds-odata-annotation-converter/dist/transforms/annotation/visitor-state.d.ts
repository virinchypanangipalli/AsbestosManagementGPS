import type { Diagnostic, Element, Position } from '@sap-ux/odata-annotation-core-types';
import type { VocabularyService } from '@sap-ux/odata-vocabularies';
export interface Context {
    /**
     * Record type that comes from text and is using alias.
     */
    recordType?: string;
    termType?: string;
    /**
     * Alias used in annotation group.
     */
    groupName?: string;
    valueType?: string;
    isCollection?: boolean;
    /**
     * Name of property (during parsing of it's value)
     */
    propertyName?: string;
    /**
     * In this context only annotations and $value property is allowed, everything else is ignored.
     */
    inValueContainer?: boolean;
}
/**
 * Contains current state of CDS annotation visitor
 */
export declare class VisitorState {
    vocabularyService: VocabularyService;
    position?: Position | undefined;
    elementStack: Element[];
    /**
     * @returns context
     */
    get context(): Context;
    /**
     * Gets the depth of the context stack.
     *
     * @type {number}
     * @returns The depth of the context stack represents the number of items.
     *              currently present in the stack.
     */
    get contextDepth(): number;
    /**
     * @returns array of diagnostics array.
     */
    get diagnostics(): Diagnostic[];
    /**
     * Gets the set of paths stored in the instance.
     *
     * @type {Set<string>}
     * @readonly
     * @returns a set contains unique path strings.
     */
    get pathSet(): Set<string>;
    private _contextStack;
    private _diagnostics;
    private _pathSet;
    /**
     *
     * @param vocabularyService - The vocabulary service associated with the instance.
     * @param [position] - The optional position associated with the instance.
     */
    constructor(vocabularyService: VocabularyService, position?: Position | undefined);
    /**
     *
     * @param context context.
     */
    pushContext(context: Context): void;
    popContext(): void;
    /**
     *
     * @param diagnostic - The diagnostic to be added.
     */
    addDiagnostic(diagnostic: Diagnostic): void;
    /**
     *
     * @param path - The path to be added.
     */
    addPath(path: string): void;
}
//# sourceMappingURL=visitor-state.d.ts.map