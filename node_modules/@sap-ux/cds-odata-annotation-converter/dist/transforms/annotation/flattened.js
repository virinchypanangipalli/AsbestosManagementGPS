"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertFlattenedPath = void 0;
const odata_annotation_core_1 = require("@sap-ux/odata-annotation-core");
const creators_1 = require("./creators");
const type_resolver_1 = require("./type-resolver");
const range_1 = require("./range");
/**
 * Builds a tree from a flattened annotation structure and updates context with the final value type.
 *
 * @param state VisitorSate for which context will be updated with the inferred value types.
 * @param segments Array of identifiers representing flattened record structure.
 * @param value annotation value.
 * @returns subtree representing flattened structure
 */
function convertFlattenedPath(state, segments, value) {
    // |________________Annotation____________________|
    // |         |                                    |
    // |         |___________Record(root)_____________|
    // |         |                                    |
    // |         |__________Property Value____________|
    // |         |                                    |
    // |         |           |________Record__________|
    // |         |           |                        |
    // |         |           |_____Property Value_____|
    // |         |           |                        |
    // |         |           |                        |
    //  UI.Chart.AxisScaling.ScaleBehavior : #AutoScale
    //  \______/|\_________/|\___________/   \________/
    //     |    |     |     |     |              |
    //     |    |     |     |     |              |
    //     |  Record  |   Record  |              |
    //     |          |           |              |
    //    Term        |           |              |
    //             Property    Property      Enum Member
    let root;
    let parent;
    const expandedStructures = convertToExpandedStructure(state, segments, value?.range);
    for (const expandedStructure of expandedStructures) {
        if (parent) {
            const record = (0, odata_annotation_core_1.createElementNode)({
                name: "Record" /* Edm.Record */,
                range: expandedStructure.element.range ?? undefined,
                content: [expandedStructure.element],
                contentRange: expandedStructure.element.range ?? undefined
            });
            // property content range should include only child range
            parent.contentRange = record.range ?? undefined;
            parent.content.push(record);
        }
        else {
            root = expandedStructure.element;
        }
        parent = expandedStructure.element;
    }
    const last = expandedStructures[expandedStructures.length - 1];
    const newContext = {
        valueType: last.vocabularyObject?.type,
        isCollection: last.vocabularyObject?.isCollection
    };
    if (last.kind === 'annotation') {
        newContext.termType = last.vocabularyObject?.type;
    }
    else {
        newContext.propertyName = last.element.attributes["Property" /* Edm.Property */].value;
    }
    state.pushContext({ ...state.context, ...newContext });
    if (!root || !parent) {
        return;
    }
    return {
        root,
        leaf: parent
    };
}
exports.convertFlattenedPath = convertFlattenedPath;
/**
 *
 * @param state VisitorSate for which context will be updated with the inferred value types.
 * @param segments Array of identifiers representing flattened record structure.
 * @param valueRange element content/value range.
 * @returns expanded structure either annotation or property kind.
 */
function convertToExpandedStructure(state, segments, valueRange) {
    const expandedStructure = [];
    const initialType = state.context.recordType ?? state.context.termType;
    const lastSegment = valueRange ? undefined : segments[segments.length - 1];
    let i = 0;
    while (i < segments.length) {
        const segment = segments[i];
        const propertyRange = (0, range_1.createRange)(segment.range?.start, valueRange?.end ?? lastSegment?.range?.end);
        if (segment.value.startsWith('@')) {
            // handle embedded annotation syntax (supported starting with cds-compiler v3)
            // e.g. @Common.Text.@UI.TextArrangement : #TextFirst
            const vocabularyNameOrAlias = segment.value.substring(1);
            const termNameSegment = segments[i + 1];
            const termQualifiedName = termNameSegment
                ? `${vocabularyNameOrAlias}.${termNameSegment.value}`
                : vocabularyNameOrAlias;
            const termValueRange = (0, range_1.createRange)(segment.range?.start, termNameSegment.range?.end);
            const embeddedAnnotation = (0, odata_annotation_core_1.createElementNode)({
                name: "Annotation" /* Edm.Annotation */,
                range: propertyRange,
                attributes: {
                    ["Term" /* Edm.Term */]: (0, creators_1.createTermAttribute)(termQualifiedName, termValueRange)
                },
                content: []
            });
            expandedStructure.push({
                kind: 'annotation',
                name: termQualifiedName,
                vocabularyObject: (0, type_resolver_1.getTerm)(state.vocabularyService, vocabularyNameOrAlias, termNameSegment.value),
                element: embeddedAnnotation
            });
            i += 2;
            continue;
        }
        const flatProperty = (0, odata_annotation_core_1.createElementNode)({
            name: "PropertyValue" /* Edm.PropertyValue */,
            range: propertyRange,
            contentRange: propertyRange,
            attributes: {
                ["Property" /* Edm.Property */]: (0, creators_1.createPropertyAttribute)(segment.value, segment.range)
            }
        });
        const parentType = expandedStructure[expandedStructure.length - 1]?.vocabularyObject?.type ?? initialType;
        expandedStructure.push({
            kind: 'property',
            name: segment.value,
            vocabularyObject: (0, type_resolver_1.getPropertyType)(state.vocabularyService, parentType, segment.value),
            element: flatProperty
        });
        i++;
    }
    // the leaf element should only include the values range in it's contentRange
    const last = expandedStructure[expandedStructure.length - 1];
    if (last) {
        if (valueRange) {
            last.element.contentRange = (0, range_1.copyRange)(valueRange);
        }
        else {
            // content range should not be added in case value does not exist
            // e.g  { AxisScaling. }
            delete last.element.contentRange;
        }
    }
    return expandedStructure;
}
//# sourceMappingURL=flattened.js.map