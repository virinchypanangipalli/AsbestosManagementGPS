import { Position, Range } from '@sap-ux/text-document-utils';
import type { Assignment } from '@sap-ux/cds-annotation-parser';
import type { CdsVocabulary, VocabularyService } from '@sap-ux/odata-vocabularies';
import type { AnnotationAssignmentToken, FileIndex, IdentifierToken, MetadataCollector, CdsCompilerFacade, PropagatedTargetMap } from '@sap/ux-cds-compiler-facade';
import { TARGET_TYPE } from '@sap-ux/odata-annotation-core';
import type { Namespace, AnnotationFile, PositionPointer, Diagnostic, Reference } from '@sap-ux/odata-annotation-core';
export { TARGET_TYPE } from '@sap-ux/odata-annotation-core-types';
export declare const adjustCdsTermNames: (assignment: Assignment, cdsVocabulary: CdsVocabulary) => Assignment;
export declare const toAssignment: (annotation: AnnotationAssignmentToken, vocabularyService: VocabularyService) => Assignment;
export interface Target {
    type: typeof TARGET_TYPE;
    name: string;
    kind: string;
    nameRange?: Range;
    range?: Range;
    assignments: Assignment[];
}
export declare const toTarget: (carrier: IdentifierToken | undefined, carrierName: string, compilerFacade?: CdsCompilerFacade) => Target;
export interface CdsAnnotationFile {
    namespace?: Namespace;
    references: Reference[];
    targetMap: Map<string, Target>;
}
export declare const toTargetMap: (fileIndex: FileIndex, uri: string, vocabularyService: VocabularyService, cdsCompilerFacade?: CdsCompilerFacade) => CdsAnnotationFile;
export declare const toAnnotationFile: (fileUri: string, vocabularyService: VocabularyService, cdsAnnotationFile: CdsAnnotationFile, metadataCollector: MetadataCollector, position?: Position, propagationMap?: PropagatedTargetMap) => {
    file: AnnotationFile;
    pointer?: string | undefined;
    nodeRange?: Range | undefined;
    diagnostics?: Diagnostic[] | undefined;
};
//# sourceMappingURL=annotation-file.d.ts.map