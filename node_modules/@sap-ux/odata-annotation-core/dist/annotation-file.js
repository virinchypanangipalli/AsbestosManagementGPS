"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSingleTextNode = exports.isElementWithName = exports.getElementAttributeValue = exports.getElementAttribute = exports.elementsWithName = exports.elements = void 0;
const odata_annotation_core_types_1 = require("@sap-ux/odata-annotation-core-types");
const elements = (predicate, element) => (element.content || []).filter((content) => content.type === odata_annotation_core_types_1.ELEMENT_TYPE && (!predicate || predicate(content)));
exports.elements = elements;
const elementsWithName = (name, element) => (0, exports.elements)((content) => content.name === name, element);
exports.elementsWithName = elementsWithName;
const getElementAttribute = (element, name) => element?.attributes?.[name];
exports.getElementAttribute = getElementAttribute;
const getElementAttributeValue = (element, name) => {
    const attributeNode = (0, exports.getElementAttribute)(element, name);
    return attributeNode?.value ?? '';
};
exports.getElementAttributeValue = getElementAttributeValue;
/**
 * Determines whether the node is of element type with given name.
 *
 * @param node node to check
 * @param name name to check
 * @returns boolean check result
 */
function isElementWithName(node, name) {
    return node?.type === odata_annotation_core_types_1.ELEMENT_TYPE && node.name === name;
}
exports.isElementWithName = isElementWithName;
/**
 * Returns true if text doesn't contain any visible charactes (tabs, spaces, line breaks are ignored).
 *
 * @param text
 * @returns boolean check result
 */
function isEmptyText(text) {
    return (text || '').replace(/[\s]/g, '').length === 0;
}
/**
 * Get text node content of an element.
 * Elements content is supposed to only contain 'Annotation' tags or single text node.
 *
 * @param element
 * @returns TextNode
 */
function getSingleTextNode(element) {
    let isInvalid = false;
    let firstTextNode = null;
    (element.content || []).forEach((node) => {
        if (!isInvalid) {
            if (node.type === odata_annotation_core_types_1.ELEMENT_TYPE && node.name !== "Annotation" /* Edm.Annotation */) {
                isInvalid = true; // child element which is not 'Annotation'
            }
            else if (node.type === odata_annotation_core_types_1.TEXT_TYPE && !isEmptyText(node.text)) {
                if (firstTextNode) {
                    isInvalid = true; // second text node
                }
                else {
                    firstTextNode = node;
                }
            }
        }
    });
    return isInvalid ? null : firstTextNode;
}
exports.getSingleTextNode = getSingleTextNode;
//# sourceMappingURL=annotation-file.js.map