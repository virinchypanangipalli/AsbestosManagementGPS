"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIdentifier = exports.COLLECTION_PREFIX = void 0;
exports.COLLECTION_PREFIX = 'Collection(';
/**
 *
 * @param identifier
 * @returns
 */
function parseIdentifier(identifier) {
    // http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_IdentifierandPathValues
    // qualifiedName has the form "<SchemaNamespaceOrAlias>.<SimpleIdentifierOrPath>[(<FunctionOrActionSignature>)])"
    // SchemaNamespace and FunctionOrActionSignature can contain ".", SimpleIdentifierOrPath should not contain dots
    if (identifier.startsWith(exports.COLLECTION_PREFIX)) {
        return parseCollection(identifier);
    }
    const parameterStartIndex = identifier.indexOf('(') + 1;
    if (parameterStartIndex > 0) {
        const functionNameIdentifier = identifier.slice(0, parameterStartIndex - 1);
        const parameterString = identifier.slice(parameterStartIndex, -1);
        const parsedIdentifier = parseInternal(functionNameIdentifier);
        const parameters = parameterString.length > 0
            ? parameterString
                .split(',')
                .map((parameter) => parameter.startsWith(exports.COLLECTION_PREFIX)
                ? parseCollection(parameter)
                : parseInternal(parameter))
            : [];
        return { ...parsedIdentifier, type: 'action-function', parameters };
    }
    return parseInternal(identifier);
}
exports.parseIdentifier = parseIdentifier;
/**
 * Parses collection identifier.
 *
 * @param identifier
 * @returns parsed identifier
 */
function parseCollection(identifier) {
    const substringEndIndex = identifier.endsWith(')') ? -1 : undefined;
    const parsedIdentifier = parseInternal(identifier.slice(exports.COLLECTION_PREFIX.length, substringEndIndex));
    return { ...parsedIdentifier, type: 'collection' };
}
/**
 * Parses identifier.
 *
 * @param identifier identifier
 * @returns parsed identifier
 */
function parseInternal(identifier) {
    const parts = identifier.split('.');
    if (parts.length > 1) {
        return {
            type: 'identifier',
            namespaceOrAlias: parts.slice(0, -1).join('.'),
            name: parts.splice(-1)[0]
        };
    }
    else {
        return {
            type: 'identifier',
            name: identifier
        };
    }
}
//# sourceMappingURL=parse.js.map