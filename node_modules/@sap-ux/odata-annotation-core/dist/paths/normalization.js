"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toFullyQualifiedPath = void 0;
const __1 = require("..");
const parse_1 = require("./parse");
/**
 *
 * @param namespaceMap
 * @param currentNamespace
 * @param path
 * @returns
 */
function toFullyQualifiedPath(namespaceMap, currentNamespace, path) {
    return path.segments
        .map((segment) => toFullyQualifiedPathSegment(namespaceMap, currentNamespace, segment))
        .join(parse_1.PATH_SEPARATOR);
}
exports.toFullyQualifiedPath = toFullyQualifiedPath;
/**
 * Converts path segment to fully qualified representation.
 *
 * @param namespaceMap namespace map
 * @param currentNamespace namespace
 * @param segment segment
 * @returns fully qualified segment text
 */
function toFullyQualifiedPathSegment(namespaceMap, currentNamespace, segment) {
    const namespace = segment.namespaceOrAlias ? namespaceMap[segment.namespaceOrAlias] : currentNamespace;
    switch (segment.type) {
        case 'action-function': {
            const parameters = segment.parameters
                .map((parameter) => (0, __1.toFullyQualifiedName)(namespaceMap, currentNamespace, parameter))
                .filter((parameter) => !!parameter)
                .join(',');
            return `${namespace}.${segment.name}(${parameters})`;
        }
        case 'identifier':
            if (segment.namespaceOrAlias === undefined) {
                return segment.name;
            }
            return `${namespace}.${segment.name}`;
        case 'term-cast':
            return `@${(0, __1.toFullyQualifiedName)(namespaceMap, currentNamespace, { ...segment, type: 'identifier' }) ?? ''}${segment.qualifier ? '#' + segment.qualifier : ''}`;
        case 'navigation-property-annotation':
            return `${(0, __1.toFullyQualifiedName)(namespaceMap, currentNamespace, {
                type: 'identifier',
                name: segment.name,
                namespaceOrAlias: segment.namespaceOrAlias
            }) ?? ''}@${(0, __1.toFullyQualifiedName)(namespaceMap, currentNamespace, { ...segment.term, type: 'identifier' }) ?? ''}${segment.term.qualifier ? '#' + segment.term.qualifier : ''}`;
        default:
            return '';
    }
}
//# sourceMappingURL=normalization.js.map