"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adjustRange = exports.getGapRangeBetween = exports.transformElementRange = exports.transformRange = void 0;
const odata_annotation_core_1 = require("@sap-ux/odata-annotation-core");
/**
 * Converts @xml-tools/ast ranges where lines and columns start with 1.
 *
 * @param position @xml-tools/ast range.
 * @returns Range where lines and columns start with 0.
 */
function transformRange(position) {
    return position
        ? odata_annotation_core_1.Range.create(position.startLine - 1, position.startColumn - 1, position.endLine - 1, position.endColumn)
        : undefined;
}
exports.transformRange = transformRange;
/**
 * Converts @xml-tools/ast ranges where lines and columns start with 1.
 * This can only be used with XML element, but it offers more accurate range in case of syntax errors.
 *
 * @param position @xml-tools/ast range.
 * @param element XML element for which the range belongs. Using different position may lead to unexpected behavior.
 * @returns Range where lines and columns start with 0.
 */
function transformElementRange(position, element) {
    const range = transformRange(position);
    if (range && element.syntax.guessedAttributesRange) {
        // guessed attribute range only has offset and we do not know how to resolve them here.
        // heuristic to support code completion for attribute names that are in a tag, which is not closed
        range.end.character++;
    }
    return range;
}
exports.transformElementRange = transformElementRange;
/**
 * Creates a range between two SourcePositions.
 *
 * @param begin SourcePosition from which the end will be used
 * @param end SourcePosition from which the start will be used
 * @returns Range between the begin and end positions
 */
function getGapRangeBetween(begin, end) {
    if (begin && end) {
        return odata_annotation_core_1.Range.create(begin.endLine - 1, begin.endColumn, end.startLine - 1, end.startColumn - 3);
    }
    return undefined;
}
exports.getGapRangeBetween = getGapRangeBetween;
/**
 * Mutates range by the given parameters.
 *
 * @param range Range object that will be changed.
 * @param startColAdjust Number which will be added to the start positions column.
 * @param endColAdjust Number which will be added to the end position column.
 * @param startLineAdjust Number which will be added to the start position line.
 * @param endLineAdjust Number which will be added to the end position line.
 */
function adjustRange(range, startColAdjust, endColAdjust, startLineAdjust = 0, endLineAdjust = 0) {
    if (range) {
        range.start.line += startLineAdjust;
        range.start.character += startColAdjust;
        range.end.line += endLineAdjust;
        range.end.character += endColAdjust;
    }
}
exports.adjustRange = adjustRange;
//# sourceMappingURL=range.js.map