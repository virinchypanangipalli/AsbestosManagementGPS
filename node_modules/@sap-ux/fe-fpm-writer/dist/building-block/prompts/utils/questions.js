"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildingBlockIdPrompt = exports.getBindingContextTypePrompt = exports.getFilterBarIdPrompt = exports.transformChoices = exports.getAggregationPathPrompt = exports.getCAPServiceChoices = exports.getEntityPrompt = exports.getCAPServicePrompt = exports.getViewOrFragmentPathPrompt = exports.getAnnotationPathQualifierPrompt = exports.getBooleanPrompt = void 0;
const path_1 = require("path");
const service_1 = require("./service");
const project_access_1 = require("@sap-ux/project-access");
const file_1 = require("@sap-ux/project-access/dist/file");
const types_1 = require("../../types");
const xml_1 = require("./xml");
const i18n_1 = require("../../../i18n");
/* eslint-disable @typescript-eslint/no-floating-promises */
(0, i18n_1.initI18n)();
const t = (0, i18n_1.translate)(i18n_1.i18nNamespaces.buildingBlock, 'prompts.common.');
/**
 * Returns a Prompt to choose a boolean value.
 *
 * @param properties - object with additional properties of question
 * @returns a boolean prompt.
 */
function getBooleanPrompt(properties) {
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        choices: [
            { name: 'False', value: false },
            { name: 'True', value: true }
        ],
        guiOptions: {
            ...guiOptions,
            selectType: 'static'
        }
    };
}
exports.getBooleanPrompt = getBooleanPrompt;
/**
 * Returns the prompt for choosing the existing annotation term.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @param annotationTerm - the annotation term
 * @returns prompt for choosing the annotation term.
 */
function getAnnotationPathQualifierPrompt(context, properties = {}, annotationTerm = []) {
    const { project, appId } = context;
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        name: 'buildingBlockData.metaPath.qualifier',
        choices: project
            ? async (answers) => {
                const { entitySet, bindingContextType } = answers.buildingBlockData?.metaPath ?? {};
                if (!entitySet) {
                    return [];
                }
                const bindingContext = bindingContextType
                    ? {
                        type: bindingContextType,
                        isCollection: answers.buildingBlockData.buildingBlockType === types_1.BuildingBlockType.Table
                    }
                    : { type: 'absolute' };
                const choices = transformChoices(await (0, service_1.getAnnotationPathQualifiers)(project, appId, entitySet, annotationTerm, bindingContext, true));
                if (entitySet && !choices.length) {
                    throw new Error(`Couldn't find any existing annotations for term ${annotationTerm.join(',')}. Please add ${annotationTerm.join(',')} annotation/s`);
                }
                return choices;
            }
            : [],
        guiOptions: {
            ...guiOptions,
            selectType: 'dynamic'
        }
    };
}
exports.getAnnotationPathQualifierPrompt = getAnnotationPathQualifierPrompt;
/**
 * Returns the prompt for choosing a View or a Fragment file.
 *
 * @param context - prompt context including data about project
 * @param validationErrorMessage - the error message to show if validation fails
 * @param properties - object with additional properties of question
 * @returns prompt for choosing the fragment file.
 */
function getViewOrFragmentPathPrompt(context, validationErrorMessage, properties = {}) {
    const { fs, project, appPath } = context;
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        name: 'viewOrFragmentPath',
        choices: project
            ? async () => {
                const files = await (0, file_1.findFilesByExtension)('.xml', appPath, ['.git', 'node_modules', 'dist', 'annotations', 'localService'], fs);
                const lookupFiles = ['.fragment.xml', '.view.xml'];
                return transformChoices(files
                    .filter((fileName) => lookupFiles.some((lookupFile) => fileName.endsWith(lookupFile)))
                    .map((file) => (0, path_1.relative)(appPath, file)));
            }
            : [],
        validate: (value) => (!project || value ? true : validationErrorMessage),
        guiOptions: {
            ...guiOptions,
            selectType: 'dynamic',
            placeholder: guiOptions?.placeholder ?? t('viewOrFragmentPath.defaultPlaceholder')
        }
    };
}
exports.getViewOrFragmentPathPrompt = getViewOrFragmentPathPrompt;
/**
 * Returns the prompt for choosing CAP service.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing CAP service.
 */
async function getCAPServicePrompt(context, properties = {}) {
    const { project, appId } = context;
    const { guiOptions } = properties;
    const services = project ? await getCAPServiceChoices(project, appId) : [];
    const defaultValue = services.length === 1 ? services[0].value : undefined;
    return {
        ...properties,
        type: 'list',
        name: 'service',
        choices: project ? getCAPServiceChoices.bind(null, project, appId) : [],
        default: defaultValue,
        guiOptions: {
            ...guiOptions,
            selectType: 'dynamic',
            placeholder: guiOptions?.placeholder ?? t('service.defaultPlaceholder')
        }
    };
}
exports.getCAPServicePrompt = getCAPServicePrompt;
/**
 * Returns a Prompt for choosing an entity.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing entity.
 */
function getEntityPrompt(context, properties = {}) {
    const { project, appId } = context;
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        name: 'buildingBlockData.metaPath.entitySet',
        choices: project
            ? async () => {
                const entitySets = (await (0, service_1.getEntitySets)(project, appId)).map((entitySet) => entitySet.name);
                return transformChoices(entitySets);
            }
            : [],
        guiOptions: {
            ...guiOptions,
            selectType: 'dynamic',
            placeholder: guiOptions?.placeholder ?? t('entity.defaultPlaceholder')
        }
    };
}
exports.getEntityPrompt = getEntityPrompt;
/**
 * Method returns choices for cap service selection.
 *
 * @param project = project
 * @param appId - application id
 * @returns choices for cap service selection.
 */
async function getCAPServiceChoices(project, appId) {
    const services = project.apps[appId]?.services;
    const servicesMap = {};
    for (const serviceKey of Object.keys(services)) {
        const mappedServiceName = await (0, project_access_1.getCapServiceName)(project.root, project.apps[appId].services[serviceKey]?.uri ?? '');
        servicesMap[mappedServiceName] = serviceKey;
    }
    return transformChoices(servicesMap);
}
exports.getCAPServiceChoices = getCAPServiceChoices;
/**
 * Return a Prompt for choosing the aggregation path.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing aggregation path of selected xml file.
 */
function getAggregationPathPrompt(context, properties = {}) {
    const { fs, project, appPath } = context;
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        name: 'aggregationPath',
        choices: project
            ? (answers) => {
                const { viewOrFragmentPath } = answers;
                if (viewOrFragmentPath) {
                    const choices = transformChoices((0, xml_1.getXPathStringsForXmlFile)((0, path_1.join)(appPath, viewOrFragmentPath), fs), false);
                    if (!choices.length) {
                        throw new Error('Failed while fetching the aggregation path.');
                    }
                    return choices;
                }
                return [];
            }
            : [],
        guiOptions: {
            ...guiOptions,
            selectType: 'dynamic',
            placeholder: guiOptions?.placeholder ?? t('aggregationPath.defaultPlaceholder')
        }
    };
}
exports.getAggregationPathPrompt = getAggregationPathPrompt;
/**
 * Method converts choices to "PromptListChoices" type.
 *
 * @param obj - object to be converted to choices
 * @param sort - apply alphabetical sort(default is "true")
 * @returns the list of choices.
 */
function transformChoices(obj, sort = true) {
    let choices = [];
    if (!Array.isArray(obj)) {
        choices = Object.entries(obj).map(([key, value]) => ({ name: key, value }));
        if (sort) {
            choices = choices.sort((a, b) => a.name.localeCompare(b.name));
        }
    }
    else {
        obj = [...new Set(obj)];
        return sort ? [...obj].sort((a, b) => a.localeCompare(b)) : obj;
    }
    return choices;
}
exports.transformChoices = transformChoices;
/**
 * Returns a Prompt for selecting existing filter bar ID or entering a new one.
 *
 * @param context - prompt context including data about project
 * @param properties - Object with additional properties of question
 * @returns an Input or List Prompt
 */
function getFilterBarIdPrompt(context, properties) {
    const { fs, project, appPath } = context;
    const { guiOptions } = properties;
    const prompt = {
        ...properties,
        type: 'input',
        name: 'buildingBlockData.filterBar',
        guiOptions: {
            ...guiOptions,
            placeholder: guiOptions?.placeholder ?? t('filterBar.defaultPlaceholder')
        }
    };
    if (properties.type === 'input') {
        return prompt;
    }
    return {
        ...prompt,
        type: 'list',
        choices: project
            ? async (answers) => {
                if (!answers.viewOrFragmentPath) {
                    return [];
                }
                return transformChoices(await (0, xml_1.getFilterBarIdsInFile)((0, path_1.join)(appPath, answers.viewOrFragmentPath), fs));
            }
            : [],
        guiOptions: {
            ...prompt.guiOptions,
            selectType: 'dynamic'
        }
    };
}
exports.getFilterBarIdPrompt = getFilterBarIdPrompt;
/**
 * Returns the Binding Context Type Prompt.
 *
 * @param properties - object with additional properties of question
 * @returns prompt for choosing binding context type.
 */
function getBindingContextTypePrompt(properties = {}) {
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'list',
        name: 'buildingBlockData.metaPath.bindingContextType',
        choices: [
            { name: t('bindingContextType.option.relative'), value: 'relative' },
            { name: t('bindingContextType.option.absolute'), value: 'absolute' }
        ],
        guiOptions: {
            ...guiOptions,
            selectType: 'static'
        }
    };
}
exports.getBindingContextTypePrompt = getBindingContextTypePrompt;
/**
 * Returns a Prompt for entering a Building block ID.
 *
 * @param context - prompt context including data about project
 * @param validationErrorMessage - The error message to show if ID validation fails
 * @param properties - object with additional properties of question
 * @returns an InputPrompt object for getting the building block ID
 */
function getBuildingBlockIdPrompt(context, validationErrorMessage, properties = {}) {
    const { fs, project, appPath } = context;
    const { guiOptions } = properties;
    return {
        ...properties,
        type: 'input',
        name: 'buildingBlockData.id',
        validate: (value, answers) => {
            if (!project) {
                return true;
            }
            if (!value) {
                return validationErrorMessage;
            }
            else {
                return answers?.viewOrFragmentPath &&
                    !(0, xml_1.isElementIdAvailable)(fs, (0, path_1.join)(appPath, answers.viewOrFragmentPath), value)
                    ? t('id.existingIdValidation')
                    : true;
            }
        },
        guiOptions: {
            ...guiOptions,
            placeholder: guiOptions?.placeholder ?? t('id.defaultPlaceholder')
        }
    };
}
exports.getBuildingBlockIdPrompt = getBuildingBlockIdPrompt;
//# sourceMappingURL=questions.js.map