import type { UIAnnotationTerms } from '@sap-ux/vocabularies-types/vocabularies/UI';
import type { Project } from '@sap-ux/project-access';
import type { InputPromptQuestion, ListPromptQuestion, PromptListChoices, WithRequired, PromptContext } from '../../../prompts/types';
/**
 * Returns a Prompt to choose a boolean value.
 *
 * @param properties - object with additional properties of question
 * @returns a boolean prompt.
 */
export declare function getBooleanPrompt(properties: WithRequired<Partial<ListPromptQuestion>, 'name'>): ListPromptQuestion;
/**
 * Returns the prompt for choosing the existing annotation term.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @param annotationTerm - the annotation term
 * @returns prompt for choosing the annotation term.
 */
export declare function getAnnotationPathQualifierPrompt(context: PromptContext, properties?: Partial<ListPromptQuestion>, annotationTerm?: UIAnnotationTerms[]): ListPromptQuestion;
/**
 * Returns the prompt for choosing a View or a Fragment file.
 *
 * @param context - prompt context including data about project
 * @param validationErrorMessage - the error message to show if validation fails
 * @param properties - object with additional properties of question
 * @returns prompt for choosing the fragment file.
 */
export declare function getViewOrFragmentPathPrompt(context: PromptContext, validationErrorMessage: string, properties?: Partial<ListPromptQuestion>): ListPromptQuestion;
/**
 * Returns the prompt for choosing CAP service.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing CAP service.
 */
export declare function getCAPServicePrompt(context: PromptContext, properties?: Partial<ListPromptQuestion>): Promise<ListPromptQuestion>;
/**
 * Returns a Prompt for choosing an entity.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing entity.
 */
export declare function getEntityPrompt(context: PromptContext, properties?: Partial<ListPromptQuestion>): ListPromptQuestion;
/**
 * Method returns choices for cap service selection.
 *
 * @param project = project
 * @param appId - application id
 * @returns choices for cap service selection.
 */
export declare function getCAPServiceChoices(project: Project, appId: string): Promise<PromptListChoices>;
/**
 * Return a Prompt for choosing the aggregation path.
 *
 * @param context - prompt context including data about project
 * @param properties - object with additional properties of question
 * @returns prompt for choosing aggregation path of selected xml file.
 */
export declare function getAggregationPathPrompt(context: PromptContext, properties?: Partial<ListPromptQuestion>): ListPromptQuestion;
/**
 * Method converts choices to "PromptListChoices" type.
 *
 * @param obj - object to be converted to choices
 * @param sort - apply alphabetical sort(default is "true")
 * @returns the list of choices.
 */
export declare function transformChoices(obj: Record<string, string> | string[], sort?: boolean): PromptListChoices;
/**
 * Returns a Prompt for selecting existing filter bar ID or entering a new one.
 *
 * @param context - prompt context including data about project
 * @param properties - Object with additional properties of question
 * @returns an Input or List Prompt
 */
export declare function getFilterBarIdPrompt(context: PromptContext, properties: WithRequired<Partial<ListPromptQuestion | InputPromptQuestion>, 'type'>): ListPromptQuestion | InputPromptQuestion;
/**
 * Returns the Binding Context Type Prompt.
 *
 * @param properties - object with additional properties of question
 * @returns prompt for choosing binding context type.
 */
export declare function getBindingContextTypePrompt(properties?: Partial<ListPromptQuestion>): ListPromptQuestion;
/**
 * Returns a Prompt for entering a Building block ID.
 *
 * @param context - prompt context including data about project
 * @param validationErrorMessage - The error message to show if ID validation fails
 * @param properties - object with additional properties of question
 * @returns an InputPrompt object for getting the building block ID
 */
export declare function getBuildingBlockIdPrompt(context: PromptContext, validationErrorMessage: string, properties?: Partial<InputPromptQuestion>): InputPromptQuestion;
//# sourceMappingURL=questions.d.ts.map