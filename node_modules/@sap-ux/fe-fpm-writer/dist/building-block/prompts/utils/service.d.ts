import type { ConvertedMetadata, EntitySet } from '@sap-ux/vocabularies-types';
import type { EntityTypeAnnotations } from '@sap-ux/vocabularies-types/vocabularies/Edm_Types';
import type { UIAnnotationTerms } from '@sap-ux/vocabularies-types/vocabularies/UI';
import { FioriAnnotationService } from '@sap-ux/fiori-annotation-api';
import type { Project } from '@sap-ux/project-access';
import type { BindingContextType } from '../../types';
/**
 * Defines binding context to filter annotation terms.
 */
interface BindingContext {
    type: BindingContextType;
    isCollection?: boolean;
}
/**
 * Method returns service name for passed CAP project service.
 *
 * @param project - project
 * @param serviceName - service name to lookup
 * @param appName  - app name in CAP project
 * @returns resolved service name
 */
export declare function getMappedServiceName(project: Project, serviceName: string, appName: string): Promise<string>;
/**
 * Method returns service object for passed service name.
 *
 * @param project - project
 * @param serviceName - service name to lookup
 * @param appName - app name in CAP project
 * @param sync - option to refresh file content from the file system
 * @returns resolved Annotation service
 */
export declare function getAnnotationService(project: Project, serviceName: string, appName: string, sync?: boolean): Promise<FioriAnnotationService>;
/**
 * Method to get and convert metadata.
 *
 * @param annotationService - Fiori Annotation service
 * @returns coverted metadata object
 */
export declare function getMergedMetadata(annotationService: FioriAnnotationService): ConvertedMetadata;
/**
 * Method gets available entity sets in project.
 *
 * @param project = project
 * @param appId = app id
 * @returns an array of entity sets
 */
export declare function getEntitySets(project: Project, appId: string): Promise<EntitySet[]>;
/**
 * Method to get the annotation term alias.
 *
 * @param annotationTerm - annotation term
 * @returns an array of entity type annotations with annotation term name
 */
export declare function getAnnotationTermAlias(annotationTerm: UIAnnotationTerms): [keyof EntityTypeAnnotations, string];
/**
 * Method to get the annotation path qualifiers for entity.
 *
 * @param project - project
 * @param appId app id in CAP project
 * @param entity - entity or entity type name
 * @param annotationTerm - annotation term names to search
 * @param bindingContext - binding context to filter the annotations
 * @param useNamespace - indicates to use namespace or namespace alias
 * @returns a record of annotation path qualifier terms
 */
export declare function getAnnotationPathQualifiers(project: Project, appId: string, entity: string, annotationTerm: UIAnnotationTerms[], bindingContext: BindingContext, useNamespace?: boolean): Promise<Record<string, string>>;
export {};
//# sourceMappingURL=service.d.ts.map