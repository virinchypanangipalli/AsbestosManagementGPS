"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilterBarIdsInFile = exports.getXPathStringsForXmlFile = exports.isElementIdAvailable = void 0;
const xmldom_1 = require("@xmldom/xmldom");
/**
 * Method validates if passed id is available.
 *
 * @param fs  - the file system object for reading files
 * @param viewOrFragmentPath - path to fragment or view file
 * @param id - id to check/validate
 * @returns true if passed id is available.
 */
function isElementIdAvailable(fs, viewOrFragmentPath, id) {
    const xmlContent = fs.read(viewOrFragmentPath).toString();
    const xmlDocument = new xmldom_1.DOMParser({ errorHandler: () => { } }).parseFromString(xmlContent);
    return xmlDocument.documentElement ? !xmlDocument.getElementById(id) : true;
}
exports.isElementIdAvailable = isElementIdAvailable;
/**
 * Converts the provided xpath string from `/mvc:View/Page/content` to
 * `/mvc:View/*[local-name()='Page']/*[local-name()='content']`.
 *
 * @param path - the xpath string
 * @returns the augmented xpath string.
 */
const augmentXpathWithLocalNames = (path) => {
    const result = [];
    for (const token of path.split('/')) {
        result.push(token === '' || token.includes(':') ? token : `*[local-name()='${token}']`);
    }
    return result.join('/');
};
/**
 * Returns a list of xpath strings for each element of the xml file provided.
 *
 * @param xmlFilePath - the xml file path
 * @param fs - the file system object for reading files
 * @returns the list of xpath strings.
 */
function getXPathStringsForXmlFile(xmlFilePath, fs) {
    const result = {};
    try {
        const xmlContent = fs.read(xmlFilePath);
        const errorHandler = (level, message) => {
            throw new Error(`Unable to parse the xml view file. Details: [${level}] - ${message}`);
        };
        const xmlDocument = new xmldom_1.DOMParser({ errorHandler }).parseFromString(xmlContent);
        const nodes = [{ parentNode: '', node: xmlDocument.firstChild }];
        while (nodes && nodes.length > 0) {
            const { parentNode, node } = nodes.shift();
            if (!node) {
                continue;
            }
            result[`${parentNode}/${node.nodeName}`] = augmentXpathWithLocalNames(`${parentNode}/${node.nodeName}`);
            const childNodes = Array.from(node.childNodes);
            for (const childNode of childNodes) {
                if (childNode.nodeType === childNode.ELEMENT_NODE) {
                    nodes.push({
                        parentNode: `${parentNode}/${node.nodeName}`,
                        node: childNode
                    });
                }
            }
        }
    }
    catch (error) {
        throw new Error(`An error occurred while parsing the view or fragment xml. Details: ${getErrorMessage(error)}`);
    }
    return result;
}
exports.getXPathStringsForXmlFile = getXPathStringsForXmlFile;
/**
 * Returns the message property if the error is an instance of `Error` else a string representation of the error.
 *
 * @param {Error} error  - the error instance
 * @returns {string} the error message.
 */
function getErrorMessage(error) {
    return error instanceof Error ? error.message : String(error);
}
/**
 * Method returns ids of specific macro element found in passed xml file.
 *
 * @param viewOrFragmentPath - path to fragment or view file
 * @param fs  - the file system object for reading files
 * @returns an array of ids found in passed xml file.
 */
async function getFilterBarIdsInFile(viewOrFragmentPath, fs) {
    const ids = [];
    const buildingBlockSelector = 'macros:FilterBar';
    const xmlContent = fs.read(viewOrFragmentPath);
    const errorHandler = (level, message) => {
        throw new Error(`Unable to parse the xml view file. Details: [${level}] - ${message}`);
    };
    const xmlDocument = new xmldom_1.DOMParser({ errorHandler }).parseFromString(xmlContent);
    const elements = Array.from(xmlDocument.getElementsByTagName(buildingBlockSelector));
    for (const element of elements) {
        const id = element.getAttributeNode('id')?.value;
        id && ids.push(id);
    }
    return ids;
}
exports.getFilterBarIdsInFile = getFilterBarIdsInFile;
//# sourceMappingURL=xml.js.map