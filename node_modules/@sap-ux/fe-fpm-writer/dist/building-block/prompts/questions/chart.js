"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChartBuildingBlockPrompts = void 0;
const i18n_1 = require("../../../i18n");
const utils_1 = require("../utils");
const types_1 = require("../../types");
const defaultAnswers = {
    id: 'Chart',
    bindingContextType: 'absolute'
};
/**
 * Returns a list of prompts required to generate a chart building block.
 *
 * @param context - prompt context including data about project
 * @returns Prompt with questions for chart.
 */
async function getChartBuildingBlockPrompts(context) {
    const { project } = context;
    const t = (0, i18n_1.translate)(i18n_1.i18nNamespaces.buildingBlock, 'prompts.chart.');
    return {
        questions: [
            (0, utils_1.getViewOrFragmentPathPrompt)(context, t('viewOrFragmentPath.validate'), {
                message: t('viewOrFragmentPath.message'),
                guiOptions: {
                    mandatory: true,
                    dependantPromptNames: ['aggregationPath', 'buildingBlockData.filterBar']
                }
            }),
            (0, utils_1.getBuildingBlockIdPrompt)(context, t('id.validation'), {
                message: t('id.message'),
                default: defaultAnswers.id,
                guiOptions: {
                    mandatory: true
                }
            }),
            (0, utils_1.getBindingContextTypePrompt)({
                message: t('bindingContextType'),
                default: defaultAnswers.bindingContextType,
                guiOptions: {
                    mandatory: true,
                    dependantPromptNames: ['buildingBlockData.metaPath.qualifier']
                }
            }),
            ...(project && (0, utils_1.isCapProject)(project)
                ? [
                    await (0, utils_1.getCAPServicePrompt)(context, {
                        message: t('service'),
                        guiOptions: {
                            mandatory: true,
                            dependantPromptNames: []
                        }
                    })
                ]
                : []),
            (0, utils_1.getEntityPrompt)(context, {
                message: t('entity'),
                guiOptions: {
                    mandatory: true,
                    dependantPromptNames: ['buildingBlockData.metaPath.qualifier']
                }
            }),
            (0, utils_1.getAnnotationPathQualifierPrompt)(context, {
                message: t('qualifier'),
                guiOptions: {
                    mandatory: true,
                    placeholder: t('qualifierPlaceholder'),
                    hint: t('valuesDependentOnEntityTypeInfo')
                }
            }, ["com.sap.vocabularies.UI.v1.Chart" /* UIAnnotationTerms.Chart */]),
            (0, utils_1.getAggregationPathPrompt)(context, {
                message: t('aggregation'),
                guiOptions: {
                    mandatory: true
                }
            }),
            (0, utils_1.getFilterBarIdPrompt)(context, {
                message: t('filterBar.message'),
                type: 'list',
                guiOptions: {
                    placeholder: t('filterBar.placeholder'),
                    creation: { placeholder: t('filterBar.inputPlaceholder') }
                }
            }),
            {
                type: 'checkbox',
                name: 'buildingBlockData.personalization',
                message: t('personalization.message'),
                choices: [
                    { name: t('personalization.choices.type'), value: 'Type' },
                    { name: t('personalization.choices.item'), value: 'Item' },
                    { name: t('personalization.choices.sort'), value: 'Sort' }
                ],
                guiOptions: {
                    placeholder: t('personalization.placeholder'),
                    selectType: 'static'
                }
            },
            {
                type: 'list',
                name: 'buildingBlockData.selectionMode',
                message: t('selectionMode.message'),
                choices: [
                    { name: t('selectionMode.choices.single'), value: 'Single' },
                    { name: t('selectionMode.choices.multiple'), value: 'Multiple' }
                ],
                guiOptions: {
                    selectType: 'static'
                }
            },
            {
                type: 'input',
                name: 'buildingBlockData.selectionChange',
                message: t('selectionChange'),
                guiOptions: {
                    placeholder: t('selectionChangePlaceholder')
                }
            }
        ],
        initialAnswers: {
            buildingBlockData: {
                buildingBlockType: types_1.BuildingBlockType.Chart
            }
        }
    };
}
exports.getChartBuildingBlockPrompts = getChartBuildingBlockPrompts;
//# sourceMappingURL=chart.js.map