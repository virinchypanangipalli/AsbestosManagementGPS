import type { PromptContext, Prompts, Subset } from './types';
import { PromptsType } from './types';
import type { ChartPromptsAnswer, TablePromptsAnswer, FilterBarPromptsAnswer, BuildingBlockTypePromptsAnswer } from '../building-block/prompts/questions';
import { generateBuildingBlock, getSerializedFileContent } from '../building-block';
type AnswerMapping = {
    [PromptsType.Chart]: ChartPromptsAnswer;
    [PromptsType.Table]: TablePromptsAnswer;
    [PromptsType.FilterBar]: FilterBarPromptsAnswer;
    [PromptsType.BuildingBlocks]: BuildingBlockTypePromptsAnswer;
};
type BasePrompt<T extends keyof AnswerMapping> = {
    type: T;
    answers: AnswerMapping[T];
    initialAnswers?: Subset<AnswerMapping[T]>;
};
export type SupportedPrompts = BasePrompt<PromptsType.Chart> | BasePrompt<PromptsType.Table> | BasePrompt<PromptsType.FilterBar> | BasePrompt<PromptsType.BuildingBlocks>;
export type SupportedGeneratorPrompts = BasePrompt<PromptsType.Chart> | BasePrompt<PromptsType.Table> | BasePrompt<PromptsType.FilterBar>;
export type NarrowPrompt<T, N = SupportedPrompts> = N extends {
    type: T;
} ? N : never;
export type SupportedPromptsMap = {
    [N in SupportedPrompts as N['type']]: (context: PromptContext) => Promise<Prompts<N['answers']>> | Prompts<N['answers']>;
};
export declare const PromptsQuestionsMap: SupportedPromptsMap;
export declare const PromptsGeneratorsMap: {
    chart: typeof generateBuildingBlock;
    table: typeof generateBuildingBlock;
    "filter-bar": typeof generateBuildingBlock;
};
export declare const PromptsCodePreviewMap: {
    chart: typeof getSerializedFileContent;
    table: typeof getSerializedFileContent;
    "filter-bar": typeof getSerializedFileContent;
};
export type SupportedGeneratorAnswers = TablePromptsAnswer | ChartPromptsAnswer | FilterBarPromptsAnswer;
export {};
//# sourceMappingURL=map.d.ts.map