"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translate = exports.initI18n = exports.i18nNamespaces = void 0;
const i18next_1 = __importDefault(require("i18next"));
const i18next_fs_backend_1 = __importDefault(require("i18next-fs-backend"));
const path_1 = require("path");
const i18nInstance = i18next_1.default.createInstance();
const namespacePrefix = 'fe-fpm-writer';
exports.i18nNamespaces = {
    buildingBlock: `${namespacePrefix}-building-block`
};
/**
 * Returns the translation file path for the provided language and namespace.
 *
 * @param {string} language the language
 * @param {string} namespace the i18n namespace
 * @returns {string} the translation file path
 */
function getTranslationFilePath(language, namespace) {
    if (namespace === exports.i18nNamespaces.buildingBlock) {
        return (0, path_1.join)(__dirname, `./prompts/translations/i18n.${language}.json`);
    }
    return '';
}
/**
 * Initialize i18next with the translations for this module.
 */
async function initI18n() {
    await i18nInstance.use(i18next_fs_backend_1.default).init({
        initImmediate: false,
        fallbackLng: 'en',
        interpolation: { escapeValue: false },
        ns: [exports.i18nNamespaces.buildingBlock],
        backend: {
            loadPath: getTranslationFilePath
        }
    });
}
exports.initI18n = initI18n;
/**
 * Wraps the i18next module's translate function to bind the provided namespace and a key prefix.
 *
 * @param {string} namespace - the translation namespace
 * @param {string} keyPrefix - the key prefix
 * @returns {Function} the translate function
 */
function translate(namespace, keyPrefix) {
    return (key, options) => i18nInstance.t(`${namespace}:${keyPrefix ?? ''}${key}`, options) || '';
}
exports.translate = translate;
//# sourceMappingURL=i18n.js.map